{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/basic-programs/input-array-of-numbers/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Input array of numbers","editLink":""},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Input array of numbers\",\n  \"section\": \"1. Basic Programs\",\n  \"order\": 2,\n  \"slug\": \"/basic-programs/input-array-of-numbers/\",\n  \"description\": \"For many applications, it is frequently required to take an array of space separated numbers from a user as string and covert it to numbers or any desired type. We will make a function to do this, and we will also make a simple addition program.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"function-to-input-array-of-numbers\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#function-to-input-array-of-numbers\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Function to Input Array of numbers\"), mdx(\"p\", null, \"For Competitive Programming and more in Rust\"), mdx(\"h2\", {\n    \"id\": \"introduction\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#introduction\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Introduction\"), mdx(\"p\", null, \"For many applications, including Competitive Programming, it is frequently required to take an array of space separated numbers from a user as string and covert it to an Array / Vector of numbers or any desired type.\"), mdx(\"p\", null, \"So, it is better to make a function and just call it instead of rewriting it again and again. It should be \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"included in your template\"), \", if you are doing Competitive Programming in Rust.\"), mdx(\"h2\", {\n    \"id\": \"what-are-we-doing\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#what-are-we-doing\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"What are we doing\"), mdx(\"p\", null, \"In Rust, and most other programming languages, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"input is taken as string of characters\"), \". So, if it is written as an array of space separated strings, it is still a string in rust.\"), mdx(\"p\", null, \"We want to separate the numbers and store them in an array or a vector.\"), mdx(\"h2\", {\n    \"id\": \"addition-program\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#addition-program\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Addition Program\"), mdx(\"p\", null, \"So, let's start with designing an addition program. In this program, user can input any number of integers in a single line and output will be sum the sum of all number.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example :\"), \" \", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Input :\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"123  234 345 456 567\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Expected Output :\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"1725\")), mdx(\"h3\", {\n    \"id\": \"1-declare-the-function-and-string\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#1-declare-the-function-and-string\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Declare the function and string\"), mdx(\"p\", null, \"You can replace \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"usize\"), \" with any data type you want, provide it can be parsed.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn take_vector() -> Vec<usize> {\\n    // Take the string input\\n\\n    let mut input = String::new();\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"2-take-input-into-string\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#2-take-input-into-string\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Take Input into string\"), mdx(\"p\", null, \"Now,  to obtain user input, we need to bring the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"io\")), \" input/output library into scope. This is present in standard library, called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"std\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use std::io;\\n\")), mdx(\"p\", null, \"Now, we read and store input in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"input\")), \" string  we created earlier.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"io::stdin()\\n    .read_line(&mut input)\\n    .unwrap();\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"unwrap()\")), \" specifies that program will panic if, somehow, string cannot be read\"), mdx(\"h3\", {\n    \"id\": \"3-converting-string-into-a-array\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#3-converting-string-into-a-array\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Converting String into a array\"), mdx(\"p\", null, \"Now, we will convert the string into the array of numbers \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"using map method\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"let arr: Vec<usize> = input\\n    .trim()\\n    .split_whitespace()\\n    .map(|x| x.parse().unwrap())\\n    .collect();\\n\\n// Return the array\\nreturn arr;\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \".trim()\")), \" is used to trim any leading or trailing whitespaces. \", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \".split_whitespace()\")), \" is used to split the string, on each whitespace. \", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \".map(|x|)\")), \" is used to perform operation on each part of string, that we made using above function. Each part is represented as x\", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \".parse()\")), \" is used to convert the string to number. Interestingly, you don't have to tell the data type in this case, because Rust automatically determines it using return data type. Cool, no? \", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"unwrap()\")), \" specifies that program will panic if, string can not be converted to number. For example if you input \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"12h\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"23 34\"), \" it will panic because it is not convertible to number. You must enter 1 number per line.\"), mdx(\"h3\", {\n    \"id\": \"4-putting-things-together\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#4-putting-things-together\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"4. Putting things together\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use std::io;\\n\\nfn take_vector() -> Vec<usize> {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let arr: Vec<usize> = input.trim().split_whitespace()\\n        .map(|x| x.parse().unwrap()).collect();\\n    return arr;\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"5-program-with-driver-code\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#5-program-with-driver-code\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"5. Program With driver code\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use std::io;\\n\\nfn take_vector() -> Vec<usize> {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let arr: Vec<usize> = input.trim().split_whitespace()\\n        .map(|x| x.parse().unwrap()).collect();\\n    return arr;\\n}\\n\\n// Driver Code\\n\\nfn main(){\\n    let arr = take_vector();\\n    let mut sum = 0;\\n    for i in 0..arr.len(){\\n        sum+=arr[i];\\n    }\\n    println!(\\\"{}\\\", sum);\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Input :\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"123  234 345 456 567\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Expected Output :\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"1725\")), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#conclusion\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Conclusion\"), mdx(\"p\", null, \"In this article, we designed a function that take an array of space separated numbers from a user as string and covert it to an Array / Vector of numbers or any desired type.\"), mdx(\"p\", null, \"Here is the function to summarize and copy and use purposes\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use std::io;\\n\\nfn take_vector() -> Vec<usize> {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let arr: Vec<usize> = input.trim().split_whitespace()\\n        .map(|x| x.parse().unwrap()).collect();\\n    return arr;\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note :\"), \" We can change the data type of number returned by replacing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"usize\")), \" in above function with desired data type.\"), mdx(\"p\", null, \"We also designed a simple addition program, in which user can input any number of integers in a single line and output will be sum the sum of all number.\"), mdx(\"p\", null, \"In my humble opinion, if you are doing competitive programming in rust, you should \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"include this function in your template\"), \" for quick access.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Thank You\")), mdx(GatsbySeo, {\n    description: \"For many applications, it is frequently required to take an array of space separated numbers from a user as string and covert it to numbers or any desired type. We will make a function to do this, and we will also make a simple addition program.\",\n    openGraph: {\n      description: 'For many applications, it is frequently required to take an array of space separated numbers from a user as string and covert it to numbers or any desired type. We will make a function to do this, and we will also make a simple addition program.'\n    },\n    mdxType: \"GatsbySeo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#function-to-input-array-of-numbers","title":"Function to Input Array of numbers","items":[{"url":"#introduction","title":"Introduction"},{"url":"#what-are-we-doing","title":"What are we doing"},{"url":"#addition-program","title":"Addition Program","items":[{"url":"#1-declare-the-function-and-string","title":"1. Declare the function and string"},{"url":"#2-take-input-into-string","title":"2. Take Input into string"},{"url":"#3-converting-string-into-a-array","title":"3. Converting String into a array"},{"url":"#4-putting-things-together","title":"4. Putting things together"},{"url":"#5-program-with-driver-code","title":"5. Program With driver code"}]},{"url":"#conclusion","title":"Conclusion"}]}]}}},"pageContext":{"id":"b2400801-012c-506a-8b47-8d04595bd4b0"}},"staticQueryHashes":["1022386572","1122327541","1339625561","2140385554","3597609067"]}