{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/number-theory/prime-factorization-of-a-number/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Prime Factorization of a number","editLink":""},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Prime Factorization of a number\",\n  \"section\": \"2.2 Factors of a Number\",\n  \"order\": 2,\n  \"slug\": \"/number-theory/prime-factorization-of-a-number/\",\n  \"description\": \"Prime Factorization of a natural number is splitting the number into its factors, which are prime numbers. Here, we will make a function to list all the prime factors of a natural number in Rust using BTreeMap.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"prime-factorization-of-a-natural-number\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#prime-factorization-of-a-natural-number\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Prime Factorization of a natural number\"), mdx(\"p\", null, \"And a program in Rust to list all the prime factors of a natural number\"), mdx(\"h2\", {\n    \"id\": \"what-is-prime-factorization-of-a-number\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#what-is-prime-factorization-of-a-number\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"What is Prime Factorization of a number\"), mdx(\"p\", null, \"Prime Factorization of a natural number is splitting the number into its factors, which are prime numbers. It can also be understood as writing a natural number as the product of prime numbers.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"For Example :\"), \"  100 = 2\", mdx(\"sup\", null, \"2\"), \" \\xD7 5\", mdx(\"sup\", null, \"2\")), mdx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, mdx(\"img\", {\n    src: primeFactorization,\n    width: \"100%\",\n    alt: \"Prime Factorization of 720\"\n  })), mdx(\"h2\", {\n    \"id\": \"approach\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#approach\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Approach\"), mdx(\"p\", null, \"Using BTreeMap\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"While number is divisible by 2, add 2 to prime factors and divide the number by 2.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Now, number is odd number. So, start from 3, and go till square root of number,  perform the step 3.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"While i divides number, simply add i to prime factors.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If the number, after loop, does not become 1, number that is left, itself is a prime number.\")), mdx(\"h2\", {\n    \"id\": \"program\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#program\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Program\"), mdx(\"p\", null, \"Program using above approach is given below :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub fn prime_factorization(mut number:i128) -> BTreeMap<i128, i128> {\\n    let mut prime_factors: BTreeMap<i128, i128> = BTreeMap::new();\\n\\n    // Step 1 : Divide by 2\\n    let mut freq:i128 = 0;\\n\\n    // You can use number % 2 == 0 also,\\n    // but this method is much more efficient\\n    while number&1 == 0 {\\n        number >>=1;\\n        // Again, You can use number /= 2 also,\\n        // but this is much more efficient\\n        freq+=1;\\n    }\\n\\n    if freq > 0 {\\n        prime_factors.insert(2, freq);\\n    }\\n\\n    // Step 2 : start from 3, and go till square root of number\\n    let mut i = 3;\\n    while i*i <= number {\\n\\n        // Step 3 : Check if i is factor of number\\n        if number%i==0 {\\n            freq = 0;\\n            while number%i==0 {\\n                number/=i;\\n                freq+=1;\\n            }\\n            prime_factors.insert(i, freq);\\n        }\\n        i+=2;\\n    }\\n\\n    // Step 4 : Check if number become 1 or not\\n    if number > 1 {\\n        prime_factors.insert(number, 1);\\n    }\\n\\n    return prime_factors;\\n}\\n\")), mdx(\"p\", null, \"Program With Driver Code\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use std::collections::BTreeMap;\\nuse std::io::stdin;\\n\\nfn take_int() -> i128 {\\n    let mut input = String::new();\\n    stdin().read_line(&mut input).unwrap();\\n    input.trim().parse().unwrap()\\n}\\n\\n// Magic starts here\\n\\npub fn prime_factorization(mut number:i128) -> BTreeMap<i128, i128> {\\n    let mut prime_factors: BTreeMap<i128, i128> = BTreeMap::new();\\n\\n    // Step 1 : Divide by 2\\n    let mut freq:i128 = 0;\\n\\n    // You can use number % 2 == 0 also,\\n    // but this method is much more efficient\\n    while number&1 == 0 {\\n        number >>=1;\\n        // Again, You can use number /= 2 also,\\n        // but this is much more efficient\\n        freq+=1;\\n    }\\n\\n    if freq > 0 {\\n        prime_factors.insert(2, freq);\\n    }\\n\\n    // Step 2 : start from 3, and go till square root of number\\n    let mut i = 3;\\n    while i*i <= number {\\n\\n        // Step 3 : Check if i is factor of number\\n        if number%i==0 {\\n            freq = 0;\\n            while number%i==0 {\\n                number/=i;\\n                freq+=1;\\n            }\\n            prime_factors.insert(i, freq);\\n        }\\n        i+=2;\\n    }\\n\\n    // Step 4 : Check if number become 1 or not\\n    if number > 1 {\\n        prime_factors.insert(number, 1);\\n    }\\n\\n    return prime_factors;\\n}\\n\\n// Driver Code Starts\\n\\npub fn main() {\\n    // Take input\\n    let number = take_int();\\n\\n    // Call Our function\\n    let prime_factors = prime_factorization(number);\\n\\n    // Print result\\n    for (key, value) in prime_factors {\\n        println!(\\\"{} appears {} time\\\", key, value);\\n    }\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Input\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"720\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Output\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"2 appears 4 time \", mdx(\"br\", null), \"\\n3 appears 2 time \", mdx(\"br\", null), \"\\n5 appears 1 time\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Time Complexity : O( sqrt(n) )\"), \" \", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Space Complexity : O( sqrt(n) )\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note :\"), \" We can print the number instead of storing into the BtreeMap, to reduce \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Space Complexity to O(1)\"), \" but it is rarely useful. BTreeMap or vector of prime factors is far more useful in real applications, so I will demonstrate BTreeMap, instead of printing directly.\"), mdx(\"p\", null, \"You can also modify the code to use \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"HashMap\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Vector\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"BTreeSet\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"HashSet\"), \", according to your requirement.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#conclusion\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Conclusion\"), mdx(\"p\", null, \"Prime Factorization of a natural number is splitting the number into the product of prime numbers. It is used for various applications.\"), mdx(\"p\", null, \"In this article, we made a function to generate all the prime factors of a number and store them with their respective exponents. Here is the function for easy access\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"pub fn prime_factorization(mut number:i128) -> BTreeMap<i128, i128> {\\n    let mut prime_factors: BTreeMap<i128, i128> = BTreeMap::new();\\n    let mut freq:i128 = 0;\\n    while number&1 == 0 {\\n        number>>=1;\\n        freq+=1;\\n    }\\n    if freq > 0 { prime_factors.insert(2, freq);}\\n    let mut i = 3;\\n    while i*i <= number {\\n        if number%i==0 {\\n            freq = 0;\\n            while number%i==0 {\\n                number/=i;\\n                freq+=1;\\n            }\\n            prime_factors.insert(i, freq);\\n        }\\n        i+=2;\\n    }\\n    if number > 1 {prime_factors.insert(number, 1);}\\n\\n    return prime_factors;\\n}\\n\")), mdx(\"p\", null, \"Above program runs on O( sqrt (n) ) time complexity. We can also optimize the code using sieve method, which we will discuss later.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Thank You\")), mdx(GatsbySeo, {\n    description: \"Prime Factorization of a natural number is splitting the number into its factors, which are prime numbers. Here, we will make a function to list all the prime factors of a natural number in Rust using BTreeMap.\",\n    openGraph: {\n      description: 'Prime Factorization of a natural number is splitting the number into its factors, which are prime numbers. Here, we will make a function to list all the prime factors of a natural number in Rust using BTreeMap.'\n    },\n    mdxType: \"GatsbySeo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#prime-factorization-of-a-natural-number","title":"Prime Factorization of a natural number","items":[{"url":"#what-is-prime-factorization-of-a-number","title":"What is Prime Factorization of a number"},{"url":"#approach","title":"Approach"},{"url":"#program","title":"Program"},{"url":"#conclusion","title":"Conclusion"}]}]}}},"pageContext":{"id":"5f33cf6b-0ae8-5340-83e9-38dba98c4595"}},"staticQueryHashes":["1022386572","1122327541","1339625561","2140385554","4275725850"]}