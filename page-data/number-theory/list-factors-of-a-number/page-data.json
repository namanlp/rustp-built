{"componentChunkName":"component---node-modules-smooth-doc-src-templates-doc-js","path":"/number-theory/list-factors-of-a-number/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"List Factors of a number","editLink":""},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"List Factors of a number\",\n  \"section\": \"2.2 Factors of a Number\",\n  \"order\": 2,\n  \"slug\": \"/number-theory/list-factors-of-a-number/\",\n  \"description\": \"Factors or divisors of a natural number are the numbers that perfectly divides it. Here, we will make a function to list all the factors of a natural number in Rust, and also optimize it to square root time complexity.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"factors-of-a-natural-number\"\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#factors-of-a-natural-number\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Factors of a Natural Number\"), mdx(\"p\", null, \"And a program in Rust to list all the factors of a natural number\"), mdx(\"h2\", {\n    \"id\": \"what-are-factors-of-a-number\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#what-are-factors-of-a-number\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"What are Factors of a number\"), mdx(\"p\", null, \"Factors or divisors of a natural number, say n, is a natural number, say m, that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"perfectly divides\"), \" the number n. That is, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n % m = 0\"), \". It can also be written that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n = km\"), \", where k is also a natural number.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"For Example :\"), \" 1, 2, and 4 are factors of 4, but 3 is not a factor of 4\"), mdx(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, mdx(\"img\", {\n    src: factorsOf100,\n    width: \"100%\",\n    alt: \"Factors of 100\"\n  })), mdx(\"h2\", {\n    \"id\": \"naive-approach\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#naive-approach\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Naive Approach\"), mdx(\"p\", null, \"Naive or brute force approach is to traverse all the numbers from 1 to n, and add the number to vector if it divides the given number. Function for this approach in Rust is :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn list_factors(number:i128) -> Vec<i128>{\\n    // Initialize factors Vector\\n    let mut factors : Vec<i128> = Vec::new();\\n\\n    // Check all the numbers from 1 to n, both inclusive\\n    for i in 1..(number+1) {\\n        if number % i == 0 {\\n            // Push the number to factors, if it divides number\\n            factors.push(i);\\n        }\\n    }\\n\\n    // Return the factors Vector as answer\\n    return factors;\\n}\\n\")), mdx(\"p\", null, \"Program with driver code\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"use std::io;\\n\\nfn list_factors(number:i128) -> Vec<i128>{\\n    // Initialize factors Vector\\n    let mut factors : Vec<i128> = Vec::new();\\n\\n    // Check all the numbers from 1 to n, both inclusive\\n    for i in 1..(number+1) {\\n        if number % i == 0 {\\n            // Push the number to factors, if it divides number\\n            factors.push(i);\\n        }\\n    }\\n\\n    // Return the factors Vector as answer\\n    return factors;\\n}\\n\\n// Driver Code\\n\\nfn main() {\\n    // Read and parse number to i128\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let number : i128 = input.trim().parse().unwrap();\\n\\n    println!(\\\"{:?}\\\", list_factors(number));\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Input\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"100\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Output\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"[1, 2, 4, 5, 10, 20, 25, 50, 100]\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Time Complexity : O(n)\"), \" \", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Space Complexity : O( sqrt(n) )\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note :\"), \" We can print the number instead of storing into the array or vector, to reduce \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Space Complexity to O(1)\"), \" but it is rarely useful. Vector of factors is far more useful in real applications, so I will demonstrate Vector, instead of printing directly.\"), mdx(\"h2\", {\n    \"id\": \"efficient-approach\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#efficient-approach\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Efficient Approach\"), mdx(\"p\", null, \"If you look the condition for factor carefully, that is\"), mdx(\"center\", null, \" \", mdx(\"b\", null, \" n = k.m \"), \" \"), mdx(\"p\", null, \"So, both k and m are factors of n, and not only m. So, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"all the factors of number are in pair\")), mdx(\"p\", null, \"For example, factors of 100 are ( 1, 100 ), ( 2, 50 ), ( 4, 25 ), ( 5, 20 ) and ( 10, 10 ). Clearly,\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"If m is a factor of n, n/m is also a factor of n\")), mdx(\"p\", null, \"Using this property, we only have to check for numbers till square root of n, because it can't be possible to get n, as a product of 2 numbers greater than square root of n.\"), mdx(\"p\", null, \"Function for this approach :\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn list_factors(number:i128) -> Vec<i128>{\\n    // Initialize factors Vector\\n    let mut factors : Vec<i128> = Vec::new();\\n\\n    let mut i : i128 = 1;\\n\\n    // Check till i is less than or equal to square root n\\n    while i*i <= number{\\n        if number % i == 0 {\\n            factors.push(i);\\n\\n            // to prevent duplication, if number is perfect square\\n            if i*i != number {\\n                factors.push(number / i);\\n            }\\n        }\\n        i+=1;\\n    }\\n\\n    // It is generally useful to sort the vector\\n    // And it will not affect our time complexity,\\n    // Because logarithmic time is much less than square root time complexity\\n\\n    factors.sort();\\n\\n    // Return the factors Vector as answer\\n    return factors;\\n}\\n\")), mdx(\"p\", null, \"Use the same driver code.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Input\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"100\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Output\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"[1, 2, 4, 5, 10, 20, 25, 50, 100]\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Time Complexity : O( sqrt(n) )\"), \" \", mdx(\"br\", null), \"\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Space Complexity : O( sqrt(n) )\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note :\"), \" Repeating, We can print the number instead of storing into the array or vector, to reduce \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Space Complexity to O(1)\"), \" but it is rarely useful. Vector of factors is far more useful in real applications, so I will demonstrate Vector, instead of printing directly.\"), mdx(\"h2\", {\n    \"id\": \"conclusion\"\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#conclusion\",\n    \"aria-hidden\": true,\n    \"className\": \"anchor\"\n  }, mdx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    height: \"16\",\n    version: \"1.1\",\n    viewBox: \"0 0 16 16\",\n    width: \"16\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Conclusion\"), mdx(\"p\", null, \"Factors or divisors of a natural number are the numbers that perfectly divides it. In this article we made a program to list all the factors of a natural number in Rust, and also optimized it to square root time complexity. Here is the optimized function for easy access\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-rust\"\n  }, \"fn list_factors(number:i128) -> Vec<i128>{\\n    let mut factors : Vec<i128> = Vec::new();\\n    let mut i : i128 = 1;\\n    while i*i <= number{\\n        if number % i == 0 {\\n            factors.push(i);\\n            if i*i != number { factors.push(number / i); }\\n        }\\n        i+=1;\\n    }\\n    factors.sort();\\n    return factors;\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Thank You\")), mdx(GatsbySeo, {\n    description: \"Factors or divisors of a natural number are the numbers that perfectly divides it. Here, we will make a function to list all the factors of a natural number in Rust, and also optimize it to square root time complexity.\",\n    openGraph: {\n      description: 'Factors or divisors of a natural number are the numbers that perfectly divides it. Here, we will make a function to list all the factors of a natural number in Rust, and also optimize it to square root time complexity.'\n    },\n    mdxType: \"GatsbySeo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#factors-of-a-natural-number","title":"Factors of a Natural Number","items":[{"url":"#what-are-factors-of-a-number","title":"What are Factors of a number"},{"url":"#naive-approach","title":"Naive Approach"},{"url":"#efficient-approach","title":"Efficient Approach"},{"url":"#conclusion","title":"Conclusion"}]}]}}},"pageContext":{"id":"17335863-22db-5fde-a3a6-490b56c5fa8e"}},"staticQueryHashes":["1022386572","1122327541","1339625561","2140385554","4275725850"]}