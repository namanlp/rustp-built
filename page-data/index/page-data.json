{"componentChunkName":"component---node-modules-smooth-doc-src-templates-page-js","path":"/","result":{"data":{"mdx":{"fields":{"pageType":"page","title":""},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"slug\": \"/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    className: \"wrapper\"\n  }, mdx(\"h1\", null, mdx(\"img\", {\n    className: \"logo\",\n    src: logo,\n    alt: \"rustp logo\"\n  }), \"Rust Programming\")), mdx(\"div\", {\n    className: \"feature-wrapper\"\n  }, mdx(\"h2\", {\n    className: \"feature\"\n  }, \"Why use \", mdx(\"span\", {\n    className: \"rust\"\n  }, \"Rust? \")), mdx(FeatureSection, {\n    mdxType: \"FeatureSection\"\n  }, mdx(FeatureList, {\n    mdxType: \"FeatureList\"\n  }, mdx(Feature, {\n    className: \"feature-item\",\n    mdxType: \"Feature\"\n  }, mdx(\"img\", {\n    className: \"feature-image\",\n    src: efficiency,\n    load: \"lazy\",\n    alt: \"Time and memory efficient\"\n  }), mdx(FeatureTitle, {\n    className: \"FeatureTitle\",\n    mdxType: \"FeatureTitle\"\n  }, \"Fast and memory efficient\"), mdx(FeatureText, {\n    className: \"feature-text\",\n    mdxType: \"FeatureText\"\n  }, \"The programs written in Rust are much faster and memory efficient as compared to other languages in general, as there are no runtime Garbage Collectors. Use of compiler instead of interpreter also boosts performance.\")), mdx(Feature, {\n    className: \"feature-item\",\n    mdxType: \"Feature\"\n  }, mdx(\"img\", {\n    className: \"feature-image\",\n    src: security,\n    load: \"lazy\",\n    alt: \"Memory safe\"\n  }), mdx(FeatureTitle, {\n    className: \"FeatureTitle\",\n    mdxType: \"FeatureTitle\"\n  }, \"Memory Safety\"), mdx(FeatureText, {\n    className: \"feature-text\",\n    mdxType: \"FeatureText\"\n  }, \"Rust ensures that there are no null pointers, dangling pointers, or data races, unlike C / C++. Moreover, you can not access elements outside of array in Rust. Rust also provides unsafe option for more flexibility.\")), mdx(Feature, {\n    className: \"feature-item\",\n    mdxType: \"Feature\"\n  }, mdx(\"img\", {\n    className: \"feature-image\",\n    src: borrowChecker,\n    load: \"lazy\",\n    alt: \"Borrow Checker\"\n  }), mdx(FeatureTitle, {\n    className: \"FeatureTitle\",\n    mdxType: \"FeatureTitle\"\n  }, \"Borrow Checker\"), mdx(FeatureText, {\n    className: \"feature-text\",\n    mdxType: \"FeatureText\"\n  }, \"Borrow checker is one of the key features of Rust. Its concept is similar to reference counters. It helps to prevent data races and memory leaks. It is implemented by default in Rust for default ADT like Vectors, Dequeue etc.\")), mdx(Feature, {\n    className: \"feature-item\",\n    mdxType: \"Feature\"\n  }, mdx(\"img\", {\n    className: \"feature-image\",\n    src: llvmIcon,\n    load: \"lazy\",\n    alt: \"Use LLVM Compiler Infrastructure\"\n  }), mdx(FeatureTitle, {\n    className: \"FeatureTitle\",\n    mdxType: \"FeatureTitle\"\n  }, \"Use LLVM Compiler Infrastructure\"), mdx(FeatureText, {\n    className: \"feature-text\",\n    mdxType: \"FeatureText\"\n  }, \"Rust uses LLVM Compiler Infrastructure, which is also used by C compilers (GCC), C++ compilers, Swift, Python, etc. which helps to optimize the code and provide enhanced security.\")), mdx(Feature, {\n    className: \"feature-item\",\n    mdxType: \"Feature\"\n  }, mdx(\"img\", {\n    className: \"feature-image\",\n    src: motherBoard,\n    load: \"lazy\",\n    alt: \"Low Level Programming Support\"\n  }), mdx(FeatureTitle, {\n    className: \"FeatureTitle\",\n    mdxType: \"FeatureTitle\"\n  }, \"Low Level Programming support\"), mdx(FeatureText, {\n    className: \"feature-text\",\n    mdxType: \"FeatureText\"\n  }, \"Rust supports Low Level Programming and control over memory, like C and C++. Rust also allows the use of Pointers and References as well as executing Assembly Language Instructions and Embedded device support.\")), mdx(Feature, {\n    className: \"feature-item\",\n    mdxType: \"Feature\"\n  }, mdx(\"img\", {\n    className: \"feature-image\",\n    src: openSource,\n    load: \"lazy\",\n    alt: \"Open Source\"\n  }), mdx(FeatureTitle, {\n    className: \"FeatureTitle\",\n    mdxType: \"FeatureTitle\"\n  }, \"Rust is Open Source\"), mdx(FeatureText, {\n    className: \"feature-text\",\n    mdxType: \"FeatureText\"\n  }, \"Rust is an Open Source Project supported by Mozilla Research. Its source code can by found at \", mdx(\"a\", {\n    href: \"https://github.com/rust-lang\",\n    target: \"_blank\"\n  }, \"Rust's Github Repo \"), \" and is well documented as well. See \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Rust_(programming_language)\",\n    target: \"_blank\"\n  }, \"Wikipedia page for reference \"))), mdx(Feature, {\n    className: \"feature-item\",\n    mdxType: \"Feature\"\n  }, mdx(\"img\", {\n    className: \"feature-image\",\n    src: cargoIcon,\n    load: \"lazy\",\n    alt: \"Cargo Package Manager\"\n  }), mdx(FeatureTitle, {\n    className: \"FeatureTitle\",\n    mdxType: \"FeatureTitle\"\n  }, \"Cargo Package Manager\"), mdx(FeatureText, {\n    className: \"feature-text\",\n    mdxType: \"FeatureText\"\n  }, \"Cargo is the Rust package manager. Cargo downloads the Rust package's dependencies, compiles the packages, makes distributable packages, and helps to share them, on \", mdx(\"a\", {\n    href: \"https://crates.io/\",\n    target: \"_blank\"\n  }, \"crates.io\"))), mdx(Feature, {\n    className: \"feature-item\",\n    mdxType: \"Feature\"\n  }, mdx(\"img\", {\n    className: \"feature-image\",\n    src: community,\n    load: \"lazy\",\n    alt: \"Strong community support\"\n  }), mdx(FeatureTitle, {\n    className: \"FeatureTitle\",\n    mdxType: \"FeatureTitle\"\n  }, \"Strong and active Community\"), mdx(FeatureText, {\n    className: \"feature-text\",\n    mdxType: \"FeatureText\"\n  }, \"Rust has strong and welcoming community. You can contact Rust devs and other community members via forums, various chat platforms as well as email. See \", mdx(\"a\", {\n    href: \"https://www.rust-lang.org/community\",\n    target: \"_blank\"\n  }, \"Rust Official Community Page.\"))))), mdx(\"a\", {\n    href: \"basic-programs/input-single-number/\",\n    className: \"browse_guides\"\n  }, \"Browse Guides \\u2192\")), mdx(GatsbySeo, {\n    description: \"Providing Guides and ready to use codes in Rust Language for development as well as competitive programming. Rust is fast, memory efficient, memory safe, uses borrow checker, provide Low Level Programming support and is lot more interesting.\",\n    openGraph: {\n      description: 'Providing Guides and ready to use codes in Rust Language for development as well as competitive programming. Rust is fast, memory efficient, memory safe, uses borrow checker, provide Low Level Programming support and is lot more interesting.'\n    },\n    mdxType: \"GatsbySeo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"73ff3f1c-52e5-5d76-a236-2e232f6b7b8f"}},"staticQueryHashes":["1022386572","1122327541","1339625561","2140385554","3597609067"]}