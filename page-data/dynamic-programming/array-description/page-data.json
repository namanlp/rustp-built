{"componentChunkName":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-5-algorithms-5-2-dynamic-programming-array-description-mdx","path":"/dynamic-programming/array-description/","result":{"data":{"mdx":{"fields":{"pageType":"doc","title":"Array Description","editLink":"https://github.com/namanlp/rustp/edit/main/website/pages/docs/5 Algorithms/5.2 Dynamic Programming/array-description.mdx"},"tableOfContents":{"items":[{"url":"#array-description","title":"Array Description","items":[{"url":"#introduction","title":"Introduction"},{"url":"#recursive-solution","title":"Recursive Solution","items":[{"url":"#algorithm","title":"Algorithm"},{"url":"#function","title":"Function"}]},{"url":"#overlapping-sub-problems","title":"Overlapping Sub-problems"},{"url":"#memoization--top-down-dp--method","title":"Memoization ( Top-down DP ) Method","items":[{"url":"#algorithm-1","title":"Algorithm"},{"url":"#function-1","title":"Function"}]},{"url":"#tabulation---bottom-up-dp---method","title":"Tabulation  ( Bottom-up DP )  Method","items":[{"url":"#algorithm-2","title":"Algorithm"},{"url":"#function-2","title":"Function"}]},{"url":"#space-optimized-tabulation-method","title":"Space Optimized Tabulation Method","items":[{"url":"#function-3","title":"Function"}]},{"url":"#conclusion","title":"Conclusion"}]}]}}},"pageContext":{"id":"a4935097-4ae3-59da-a20b-9e72eeb83ed5","frontmatter":{"title":"Array Description","section":"5.2 Dynamic Programming","order":25,"slug":"/dynamic-programming/array-description/","description":"Determine the number of possible arrays, absolute difference of adjacent elements is at most 1. We will see recursive, memoization, tabulation and space optimized DP solution in Rust Language."},"contentFilePath":"/home/naman/Desktop/rustp/website/pages/docs/5 Algorithms/5.2 Dynamic Programming/array-description.mdx"}},"staticQueryHashes":["1122327541","1331056949","1339625561","148928582","2140385554"]}