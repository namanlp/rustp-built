{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-3-combinatorics-modular-permutation-mdx-1f8613c86de33da3cb19.js","mappings":"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","sources":["webpack://website/./pages/docs/3 Combinatorics/Modular-Permutation.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    strong: \"strong\",\n    em: \"em\",\n    pre: \"pre\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"modular-permutation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#modular-permutation\",\n    \"aria-label\": \"modular permutation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Modular Permutation\"), \"\\n\", React.createElement(_components.p, null, \"and program to find the Modular Permutation using Modular factorial Array and Modular Multiplicative inverse in Rust\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"introduction\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"In many problems, it becomes unfeasible to calculate Permutation using traditional data types like \", React.createElement(_components.code, null, \"i64\"), \" or even \", React.createElement(_components.code, null, \"i128\"), \" due to \", React.createElement(_components.code, null, \"overflow\"), \". The largest integer data type in rust, \", React.createElement(_components.code, null, \"u128\"), \" can hold the number upto order of 10\", React.createElement(\"sup\", null, \"38\"), \".\\nBut Permutations grows pretty fast with n and r. For example, \", React.createElement(_components.strong, null, React.createElement(\"sup\", null, \"100\"), \"P\", React.createElement(\"sub\", null, \"100\")), \" is approximately is 9.33 Ã— 10\", React.createElement(\"sup\", null, \"157\")), \"\\n\", React.createElement(_components.p, null, \"So, it becomes unfeasible from competitive programming point of view to compute exact values using C / C++ / Rust etc.\\nSo, in most programming contest, we have to find the answer modulo with respect to given number, generally \", React.createElement(_components.strong, null, React.createElement(\"code\", null, \"10\", React.createElement(\"sup\", null, \"9\"), \" + 7 or 1000000007\")), \" is used because It is \", React.createElement(_components.em, null, \"safe prime number\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"Hence, we will discuss how to find \", React.createElement(_components.strong, null, \"Modular Permutation\"), \" or permutation of a large number with respect to a given number using \", React.createElement(_components.a, {\n    href: \"/combinatorics/modular-factorial-array/\"\n  }, \"Modular factorial Array\"), \" and \", React.createElement(_components.a, {\n    href: \"/number-theory/modular-inverse/\"\n  }, \"Modular Multiplicative inverse\"), \" in Rust.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"single-permutation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#single-permutation\",\n    \"aria-label\": \"single permutation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Single Permutation\"), \"\\n\", React.createElement(_components.p, null, \"When we have to find the value of 1 \", React.createElement(\"sup\", null, \"n\"), \"P\", React.createElement(\"sub\", null, \"r\"), \", we can just find the modular permutation by using modular multiplication and multiplying numbers from \", React.createElement(_components.code, null, \"n-r+1\"), \" to \", React.createElement(_components.code, null, \"n\"), \", inclusive.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note:\"), \" This would take linear time complexity for each permutation. So, this is efficient when there are fewer of queries ( When there are less than log(n) queries to be precise.)\"), \"\\n\", React.createElement(_components.p, null, \"Here is code for above implementation.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn modular_permutation(n: i128, r: i128, p:i128) -> i128{\\n    // Take Answer to be 1\\n    let mut ans = 1;\\n\\n    // nPr = n! / (n-r)! = (n-r+1) Ã— (n-r+2) Ã— .... Ã— n\\n    for i in (n-r+1)..(n+1) {\\n        ans *= i;\\n\\n        // Division and Modulo are expensive for cpu\\n        // So, we find modulo if answer is greater than or equal to p\\n        // It can never become p though, else, answer will become 0\\n        if ans>=p {\\n            ans = ans%p;\\n        }\\n    }\\n\\n    return ans;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With Driver Code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\nfn modular_permutation(n: i128, r: i128, p:i128) -> i128{\\n    // Take Answer to be 1\\n    let mut ans = 1;\\n\\n    // nPr = n! / (n-r)! = (n-r+1) Ã— (n-r+2) Ã— .... Ã— n\\n    for i in (n-r+1)..(n+1) {\\n        ans *= i;\\n\\n        // Division and Modulo are expensive for cpu\\n        // So, we find modulo if answer is greater than or equal to p\\n        // It can never become p though, else, answer will become 0\\n        if ans>=p {\\n            ans = ans%p;\\n        }\\n    }\\n\\n    return ans;\\n}\\n\\n// Driver code\\n\\nuse std::io::stdin;\\nfn take_int() -> i128 {\\n    let mut input = String::new();\\n    stdin().read_line(&mut input).unwrap();\\n    return input.trim().parse().unwrap();\\n}\\n\\npub fn main() {\\n    // Take values of n, r and p\\n    let n = take_int();\\n    let r = take_int();\\n    let p = take_int();\\n    println!(\\\"{}\\\", modular_permutation(n, r, p));\\n}\\n\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"100 \", React.createElement(\"br\"), \"\\n50 \", React.createElement(\"br\"), \"\\n1000000007\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"505671657\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( n )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( 1 )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"efficient-approach\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#efficient-approach\",\n    \"aria-label\": \"efficient approach permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Efficient Approach\"), \"\\n\", React.createElement(_components.p, null, \"When we have to find large number of modular permutations, say 10\", React.createElement(\"sup\", null, \"5\"), \" or 10\", React.createElement(\"sup\", null, \"6\"), \" permutations and n can also range up to 10\", React.createElement(\"sup\", null, \"5\"), \" or 10\", React.createElement(\"sup\", null, \"6\"), \", we can clearly see that above approach will result into\\nTLE (Time Limit Exceeded) in Competitive Programming contests.\"), \"\\n\", React.createElement(_components.p, null, \"So, we have to find Modular Permutation in Constant time for each test case.\"), \"\\n\", React.createElement(_components.p, null, \"The idea is to first generate a \", React.createElement(_components.a, {\n    href: \"/combinatorics/modular-factorial-array/\"\n  }, \"Modular Factorial Array\"), \" and then find the number of permutations using equation\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"sup\", null, \"n\"), \"P\", React.createElement(\"sub\", null, \"r\"), \" = n! / (n-r)!\"), \"\\n\", React.createElement(_components.p, null, \"Using Modular Arithmetic, this equation becomes\"), \"\\n\", React.createElement(\"center\", null, React.createElement(\"b\", null, \"(\", React.createElement(\"sup\", null, \"n\"), \" P \", React.createElement(\"sub\", null, \"r\"), \") mod p = ((n!)  mod p * (n-r)! \", React.createElement(\"sup\", null, \"-1\"), \" mod p) mod p \"), \" \"), \"\\n\", React.createElement(_components.p, null, \"To find the number of permutations.\"), \"\\n\", React.createElement(_components.p, null, \"The implementation using this approach is.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn modular_permutation(n: usize, r: usize, p:usize, factorial_array:&Vec<usize>) -> usize{\\n    return (factorial_array[n] * mod_inverse(factorial_array[n - r], p)) % p;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\n\\nfn modular_permutation(n: usize, r: usize, p:usize, factorial_array:&Vec<usize>) -> usize{\\n    return (factorial_array[n] * mod_inverse(factorial_array[n - r], p)) % p;\\n}\\n\\n// Driver code\\n\\nuse std::io::stdin;\\nfn take_int() -> usize {\\n    let mut input = String::new();\\n    stdin().read_line(&mut input).unwrap();\\n    return input.trim().parse().unwrap();\\n}\\n\\n\\nfn generate_factorial_array(max_number : usize, divisor : usize) -> Vec<usize>{\\n    let mut factorial_array : Vec<usize> = vec![1; max_number+1];\\n    for i in 2..(max_number + 1) {\\n        factorial_array[i] = (factorial_array[i-1] * i) % divisor; }\\n    return factorial_array;\\n}\\n\\nfn modular_exponent(mut n:usize ,mut x:usize , p:usize) -> usize{\\n    let mut ans = 1;\\n    if x<=0 { return 1; }\\n    loop { if x==1 { return (ans * n) % p; }\\n        if x&1==0 { n=( n * n ) % p; x>>=1;continue; }\\n        else { ans = (ans*n) % p; x-=1; }\\n    }\\n}\\n\\nfn mod_inverse (n:usize, p:usize) -> usize{\\n    return modular_exponent(n, p-2, p);\\n}\\n\\npub fn main() {\\n    // Take values of n, r and p\\n    let n = take_int();\\n    let r = take_int();\\n    let p = take_int();\\n    // Contains factorial of all numbers from 1 to 10^6, modulo 10^9 + 7\\n    let factorial_array = generate_factorial_array(1_000_000, 1_000_000_007);\\n    println!(\\\"{}\\\", modular_permutation(n, r, p, &factorial_array));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"100 \", React.createElement(\"br\"), \"\\n50 \", React.createElement(\"br\"), \"\\n1000000007\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"505671657\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( nlog(n) )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( n )\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note:\"), \" Although the time complexity is higher in this approach, it will be very less for higher number of queries. For example, if we have n queries of  \", React.createElement(\"sup\", null, \"n\"), \"P\", React.createElement(\"sub\", null, \"r\"), \", the time taken by this approach will still be O( nlog(n) ),\\nwhereas earlier approach will take O( n\", React.createElement(\"sup\", null, \"2\"), \" ) time. So, this is efficient only when there are \", React.createElement(_components.strong, null, \"higher number of queries\"), \".\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"summary\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#summary\",\n    \"aria-label\": \"summary permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Summary\"), \"\\n\", React.createElement(_components.p, null, \"Finding number of possible Permutations is one of the standard problems in Combinatorics. But as we know, it grows pretty fast, and it becomes necessary to compute modulo of number of Permutations in many problems.\"), \"\\n\", React.createElement(_components.p, null, \"So, in this article, we saw how to find modular Permutation using Modular factorial Array and Modular Multiplicative inverse in Rust.\"), \"\\n\", React.createElement(_components.p, null, \"Here is code for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn modular_exponent(mut n:usize ,mut x:usize , p:usize) -> usize{\\n    let mut ans = 1;\\n    if x<=0 { return 1; }\\n    loop { if x==1 { return (ans * n) % p; }\\n        if x&1==0 { n=( n * n ) % p; x>>=1;continue; }\\n        else { ans = (ans*n) % p; x-=1; }\\n    }\\n}\\n\\nfn mod_inverse (n:usize, p:usize) -> usize{\\n    return modular_exponent(n, p-2, p);\\n}\\n\\n// Here is the function\\nfn modular_permutation(n: usize, r: usize, p:usize, factorial_array:&Vec<usize>) -> usize{\\n    return (factorial_array[n] * mod_inverse(factorial_array[n - r], p)) % p;\\n}\\n\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"Modular Permutation - Rust Programming\",\n    description: \"In many problems, we may require to find number of possible permutations modulo with respect to a given number.So we will see how to find modular Permutation using Modular factorial Array and Modular Multiplicative inverse in Rust.\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/3 Combinatorics/Modular-Permutation.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","code","strong","em","pre","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}