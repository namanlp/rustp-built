{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-2-number-theory-2-1-arithematic-operations-integer-square-root-mdx-277208412797a2860349.js","mappings":"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","sources":["webpack://website/./pages/docs/2 Number Theory/2.1 Arithematic Operations/integer-square-root.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    blockquote: \"blockquote\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"integer--floor--square-root\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#integer--floor--square-root\",\n    \"aria-label\": \"integer  floor  square root permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Integer ( Floor ) square root\"), \"\\n\", React.createElement(_components.p, null, \"of a whole number and program to find it in Rust Language\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"introduction\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Many times, we have to compute the integer or \", React.createElement(_components.strong, null, \"floor value of square root\"), \" of a given very large number instead of  exact square root.\"), \"\\n\", React.createElement(_components.p, null, \"You may argue that we can find the square root of a number using default \", React.createElement(_components.code, null, \"sqrt()\"), \" method, and then take its floor.\"), \"\\n\", React.createElement(_components.p, null, \"But, there is a catch. \", React.createElement(_components.code, null, \"f64\"), \" type uses some bits to represent the floating digits. So, it reduces the accuracy of square roots of numbers greater than 10\", React.createElement(\"sup\", null, \"14\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"So, if you have to find a floor of square root of. say, 10\", React.createElement(\"sup\", null, \"18\"), \", you will simply get inaccurate answers.\\nThis is a frequent cause of failing testcases in many questions, especially if 10 test cases are passing, and 11th gives wrong answer in solution involving square root of number >= 10\", React.createElement(\"sup\", null, \"15\"), \", this might be the issue.\"), \"\\n\", React.createElement(_components.p, null, \"So, in this article, we will see how to find \", React.createElement(_components.strong, null, \"Floor of square root\"), \" of a number in Logarithmic time complexity using binary search in Rust Language.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"naive-approach\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#naive-approach\",\n    \"aria-label\": \"naive approach permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Naive approach\"), \"\\n\", React.createElement(_components.p, null, \"Naive Approach would be to linearly check each and every number from 1 till we find a number whose square root is greater than the given number.\"), \"\\n\", React.createElement(_components.p, null, \"This will take \", React.createElement(_components.strong, null, \"O( sqrt(n) )\"), \" time complexity. Function using this approach is\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn square_root(num:usize) -> usize{\\n    let mut i = 0;\\n\\n    // If the number is 0 or 1,\\n    if num <=1 {\\n        return num;\\n    }\\n\\n    // Increase i, till square of i+1 is less than or equal to number\\n    while (i+1)*(i+1) <= num {\\n        i+=1;\\n    }\\n    return i;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Program With driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\nfn square_root(num:usize) -> usize{\\n    let mut i = 0;\\n\\n    // If the number is 0 or 1,\\n    if num <=1 {\\n        return num;\\n    }\\n\\n    // Increase i, till square of i+1 is less than or equal to number\\n    while (i+1)*(i+1) <= num {\\n        i+=1;\\n    }\\n    return i;\\n}\\n\\n// Driver Code\\n\\nfn main() {\\n    println!(\\\"{}\\\", square_root(899));\\n    println!(\\\"{}\\\", square_root(900));\\n    println!(\\\"{}\\\", square_root(901));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"29 \", React.createElement(\"br\"), \"\\n30 \", React.createElement(\"br\"), \"\\n30\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( n )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( 1 )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"efficient-binary-search-approach\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#efficient-binary-search-approach\",\n    \"aria-label\": \"efficient binary search approach permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Efficient Binary Search Approach\"), \"\\n\", React.createElement(_components.p, null, \"We can optimize the above approach using binary search, and find the integer square root in  \", React.createElement(_components.strong, null, \"Logarithmic time\"), \" instead of Linear time.\"), \"\\n\", React.createElement(_components.p, null, \"Below algorithm can find the integer square root of numbers upto \", React.createElement(_components.strong, null, \"10\", React.createElement(\"sup\", null, \"18\")), \" in logarithmic time complexity.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm\",\n    \"aria-label\": \"algorithm permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"If the number is 0 or 1, return that number.\"), \"\\n\", React.createElement(_components.li, null, \"Take starting point ( or low ) to be 1 and ending point ( or high ) to be 1.1×10\", React.createElement(\"sup\", null, \"9\"), \" .\"), \"\\n\", React.createElement(_components.li, null, \"Find the mid-point of high and low. If mid×mid is equal to the number, return the mid.\"), \"\\n\", React.createElement(_components.li, null, \"If mid is less than the number, store the value of the mid, and set the low to mid+1.\"), \"\\n\", React.createElement(_components.li, null, \"Else, Set the high to mid -1.\"), \"\\n\", React.createElement(_components.li, null, \"Repeat steps 3 to 5 till high is not equal to low.\"), \"\\n\", React.createElement(_components.li, null, \"If high is equal to low, return the stored value of mid in step 4.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note :\"), \" I have taken 1.1×10\", React.createElement(\"sup\", null, \"9\"), \" as high because it can find the square root of all the numbers upto  \", React.createElement(_components.strong, null, \"10\", React.createElement(\"sup\", null, \"18\")), \", without \", React.createElement(_components.strong, null, \"overflowing.\")), \"\\n\", React.createElement(_components.h3, {\n    id: \"function\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function\",\n    \"aria-label\": \"function permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\nfn square_root(num:usize) -> usize{\\n\\n    // If number is less than or equal to 1, return it\\n    if num<=1 { return num }\\n\\n    // Take high and low, mid and ans .\\n    let mut low : usize = 1;\\n    let mut high : usize = 1_100_000_000;\\n\\n    let mut mid;\\n    let mut ans = 0;\\n\\n\\n    while high>=low {\\n        // Right shift by 1 is equivalent to divide\\n        mid = (high+low)>>1;\\n\\n        let mid_square = mid*mid;\\n\\n        // If mid_square if equal to number, return mid\\n        if mid_square == num { return mid }\\n\\n        // If mid_square is less than number, set ans to mid\\n        // And low to mid+1\\n        // Else, set high to mid -1\\n        if mid_square < num {\\n            ans = mid;\\n            low = mid+1;\\n        }else {\\n            high = mid-1;\\n        }\\n    }\\n\\n    // In case the given number is not a prefect square,\\n    // Return stored ans, because it is floor of square root.\\n    return ans;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Use the same driver code.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"29 \", React.createElement(\"br\"), \"\\n30 \", React.createElement(\"br\"), \"\\n30\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( log( n ) )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( 1 )\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note :\"), \" Similarly, you can use the same program for \", React.createElement(_components.strong, null, \"Cube Root\"), \" and other higher degree roots.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Many times, we have to compute the integer or \", React.createElement(_components.strong, null, \"floor value of square root\"), \" of a given very large number instead of  exact square root.\"), \"\\n\", React.createElement(_components.p, null, \"The default \", React.createElement(_components.code, null, \"sqrt()\"), \" method might become inaccurate for such large numbers. Hence, we have to use binary search method to compute such large square roots.\"), \"\\n\", React.createElement(_components.p, null, \"In this article, we saw how to find the integer or floor square root of very large number in logarithmic time complexity using binary search in Rust Language.\"), \"\\n\", React.createElement(_components.p, null, \"Here is the optimized function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn square_root(num:usize) -> usize{\\n    if num<=1 { return num }\\n    let mut l : usize = 1;\\n    let mut h : usize = 1_100_000_000;\\n    let mut m;\\n    let mut ans = 0;\\n    while h>=l {\\n        m = (h+l)>>1;\\n        let m_s = m*m;\\n        if m_s == num { return m }\\n        if m_s < num { ans = m ; l = m+1; }\\n        else { h = m-1; }\\n    }\\n    return ans;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"I suggest you to include it in your template.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Thank You\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"Integer ( Floor value ) of Square Root of very large number using Binary Search - Rust Programming\",\n    description: \"Many times, we have to compute the integer or floor value of square root. In this article, we will see how to find the integer or floor square root of very large number in logarithmic time complexity using binary search in Rust Language\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/2 Number Theory/2.1 Arithematic Operations/integer-square-root.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","strong","code","pre","blockquote","h3","ol","li","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}