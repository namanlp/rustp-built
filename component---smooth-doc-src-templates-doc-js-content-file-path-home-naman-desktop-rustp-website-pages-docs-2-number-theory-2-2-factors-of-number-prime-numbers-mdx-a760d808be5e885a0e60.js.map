{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-2-number-theory-2-2-factors-of-number-prime-numbers-mdx-a760d808be5e885a0e60.js","mappings":"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","sources":["webpack://website/./images/Number Theory/prime-numbers.webp","webpack://website/./pages/docs/2 Number Theory/2.2 Factors Of Number/prime-numbers.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/prime-numbers-970dba61bd05474a22afcad9486d6e28.webp\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport primeNumber from \"../../../../images/Number Theory/prime-numbers.webp\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"prime-numbers\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#prime-numbers\",\n    \"aria-label\": \"prime numbers permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Prime Numbers\"), \"\\n\", React.createElement(_components.p, null, \"and program to check if a number is Prime number or not in Rust.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"what-are-the-prime-numbers-\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#what-are-the-prime-numbers-\",\n    \"aria-label\": \"what are the prime numbers  permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"What are the Prime Numbers ?\"), \"\\n\", React.createElement(_components.p, null, \"Prime Numbers are the natural number greater than 1, that are divisible only by 1 and the number itself.\"), \"\\n\", React.createElement(_components.p, null, \"Alternatively, you can say that prime numbers are the natural numbers greater than 1 that have only 2 factors, that is 1 and the number itself.\"), \"\\n\", React.createElement(_components.p, null, \"Smallest Prime number is 2.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"For Example\"), \" : 19 is a prime number. It is only divisible by 1 and 19 itself.\"), \"\\n\", \"\\n\", React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, React.createElement(\"img\", {\n    src: primeNumber,\n    width: \"100%\",\n    alt: \"Prime Numbers less than 20\"\n  })), \"\\n\", React.createElement(_components.h2, {\n    id: \"properties-of-prime-numbers\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#properties-of-prime-numbers\",\n    \"aria-label\": \"properties of prime numbers permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Properties of Prime Numbers\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"All prime numbers except 2 are odd numbers. 2 is also the smallest prime number.\"), \"\\n\", React.createElement(_components.li, null, \"2 prime numbers are always co prime to each other, that is their GCD = 1.\"), \"\\n\", React.createElement(_components.li, null, \"Every natural number greater than 1 can be expressed as product of powers of prime numbers, which is unique. See \", React.createElement(_components.a, {\n    href: \"/number-theory/prime-factorization-of-a-number/\"\n  }, \"Prime Factorization of a number\")), \"\\n\", React.createElement(_components.li, null, \"Every even natural number greater than 2 can be expressed as the sum of two prime numbers.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Fermat's_little_theorem\"\n  }, \"Fermat's little theorem\"), \", for any number n, and a prime number p,  \", React.createElement(\"b\", null, \" ( n\", React.createElement(\"sup\", null, \" p-1\"), \" )  mod p = 1 \")), \"\\n\", React.createElement(_components.li, null, \"Every prime number greater than 3 can be written as 6n+1 or 6n-1, where n is any natural number.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"check-if-a-number-is-prime\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#check-if-a-number-is-prime\",\n    \"aria-label\": \"check if a number is prime permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Check if a number is Prime\"), \"\\n\", React.createElement(_components.p, null, \"Let us now make a function to check if a given number is prime or not. We iterate through all the number from 2 to square root of number and check if it divides the number. If yes, return false.\"), \"\\n\", React.createElement(_components.p, null, \"Finally, return true because it not divisible by any number.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Proof\")), \"\\n\", React.createElement(_components.p, null, \"Let us suppose, that some number, N is not prime. So, we can write it as\"), \"\\n\", React.createElement(_components.p, null, \"N = A × B\"), \"\\n\", React.createElement(_components.p, null, \"and 1 < A ≤ B < N. So, A must be less than or equal to square root of N, else A × B will become greater than N, because A × A > N and A ≤ B => A × B > N.\"), \"\\n\", React.createElement(_components.p, null, \"Hence, we have to check for the numbers only upto sqrt( N ).\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"program\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#program\",\n    \"aria-label\": \"program permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Program\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\nfn check_prime(n:usize) -> bool{\\n\\n    // Iterate from i = 2 to sqrt ( n )\\n    let mut i:usize = 2;\\n    while i*i<=n {\\n        // Return false if the number is divisible\\n        if n%i == 0 {\\n            return false;\\n        }\\n        i+=1;\\n    }\\n\\n    // Return true finally\\n    return true;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"with Driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::io::stdin;\\n\\nfn take_int() -> usize {\\n    let mut input = String::new();\\n    stdin().read_line(&mut input).unwrap();\\n    return input.trim().parse().unwrap();\\n}\\n\\nfn check_prime(n:usize) -> bool{\\n\\n    // Iterate from i = 2 to sqrt ( n )\\n    let mut i = 2;\\n    while i*i<=n {\\n        // Return false if the number is divisible\\n        if n%i == 0 {\\n            return false;\\n        }\\n        i+=1;\\n    }\\n\\n    // Return true finally\\n    return true;\\n}\\n\\npub fn main() {\\n    // Take the number from user\\n    let n = take_int();\\n\\n    // Output on the basis of if the number is prime or not\\n\\n    if check_prime(n) {\\n        println!(\\\"Yes, given number is a prime number\\\");\\n    }\\n    else {\\n        println!(\\\"No, given number is not a prime number\\\");\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"1000000007\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Yes, given number is a prime number\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( sqrt( N ) )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( 1 )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Prime numbers is a very important concept, especially from Competitive programming point of view. They have plenty of interesting properties and interesting patterns.\"), \"\\n\", React.createElement(_components.p, null, \"In this article, we discussed some of the properties of prime numbers, as well as made a program to check whether a given number is prime or not in square root time complexity.\"), \"\\n\", React.createElement(_components.p, null, \"Here is the optimized function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn check_prime(n:usize) -> bool{\\n    let mut i = 2;\\n    while i*i<=n {\\n        if n%i == 0 { return false; }\\n        i+=1;\\n    }\\n    return true;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Thank You\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"Prime Numbers and function to check if a number is prime - Rust Programming\",\n    description: \"Prime numbers are the numbers which are divisible only by 1 and the number itself. We will discuss some of the properties of Prime numbers and make a program to check if a given number is prime number or not in Rust.\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/2 Number Theory/2.2 Factors Of Number/prime-numbers.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","strong","ul","li","h3","pre","code","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","textAlign","src","primeNumber","width","alt","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}