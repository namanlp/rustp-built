"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[384],{60556:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});var a=t(27378),l=t(20951),r=t.p+"static/combinations-3ca27989975a1c85c2cb433b11e2c437.webp",i=t(88957);function o(e){var n=Object.assign({h1:"h1",a:"a",div:"div",p:"p",h2:"h2",strong:"strong",em:"em",ol:"ol",li:"li",pre:"pre",code:"code",blockquote:"blockquote"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,{id:"combination",style:{position:"relative"}},a.createElement(n.a,{href:"#combination","aria-label":"combination permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Combination"),"\n",a.createElement(n.p,null,"and program to find the Combination in Rust"),"\n",a.createElement(n.h2,{id:"what-is-combination",style:{position:"relative"}},a.createElement(n.a,{href:"#what-is-combination","aria-label":"what is combination permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"What is Combination"),"\n",a.createElement(n.p,null,"Combination is the number of ways in which we can ",a.createElement(n.strong,null,"choose")," some objects from the given set of objects.\nIn combination, the order in which things are arranged ",a.createElement(n.strong,null,"do not")," matter, unlike in permutation."),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"For example :")," The Combinations of word RUST of length 3 are 4 => RUS, RUT, RST, UST."),"\n",a.createElement(n.p,null,"In this article, we will use standard reference : the number of total objects in the set are denoted by ",a.createElement(n.strong,null,"n")," and the number of items chosen at a time are denoted by ",a.createElement(n.strong,null,"r"),"."),"\n",a.createElement(n.p,null,"So, total number of ways of choosing ",a.createElement(n.em,null,"r")," items from ",a.createElement(n.em,null,"n")," items are represented as ",a.createElement(n.strong,null,a.createElement("sup",null,"n"),"C",a.createElement("sub",null,"r")),". It will also be written as ",a.createElement(n.strong,null,"C(n, r)")),"\n","\n",a.createElement("div",{style:{textAlign:"center"}},a.createElement("img",{src:r,width:"100%",alt:"Combinations of RUST"})),"\n",a.createElement(n.h2,{id:"combination-formulae",style:{position:"relative"}},a.createElement(n.a,{href:"#combination-formulae","aria-label":"combination formulae permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Combination formulae"),"\n",a.createElement(n.p,null,"Here are some frequently used formulae for Combinations."),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,a.createElement(n.strong,null,a.createElement("sup",null,"n"),"C",a.createElement("sub",null,"r"))," = n ! / ( (n-r)! Ã— r! )"),"\n",a.createElement(n.li,null,a.createElement("sup",null,"n"),"C",a.createElement("sub",null,"0")," + ",a.createElement("sup",null,"n"),"C",a.createElement("sub",null,"1")," + ",a.createElement("sup",null,"n"),"C",a.createElement("sub",null,"2")," ..... + ",a.createElement("sup",null,"n"),"C",a.createElement("sub",null,"n")," = ",a.createElement(n.strong,null,"2",a.createElement("sup",null,"n"))),"\n"),"\n",a.createElement(n.h2,{id:"program-to-find-combination",style:{position:"relative"}},a.createElement(n.a,{href:"#program-to-find-combination","aria-label":"program to find combination permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Program to find Combination"),"\n",a.createElement(n.p,null,"Now, let us write a program in Rust Language to find the number of permutations when we are given ",a.createElement(n.em,null,"n")," distinct objects, and we can arrange ",a.createElement(n.em,null,"r")," at a time."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-rust"},"fn combination(n: usize, r: usize) -> usize{\n    // nCr = n! / (r! * (n-r)!)\n    return factorial(n)/(factorial(r) * factorial(n-r));\n}\n")),"\n",a.createElement(n.p,null,"With driver code"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-rust"},'\nfn combination(n: usize, r: usize) -> usize{\n    // nCr = n! / (r! * (n-r)!)\n    return factorial(n)/(factorial(r) * factorial(n-r));\n}\n\n// Driver code\n\nuse std::io::stdin;\nfn take_int() -> usize {\n    let mut input = String::new();\n    stdin().read_line(&mut input).unwrap();\n    return input.trim().parse().unwrap();\n}\nfn factorial(number : usize) -> usize{\n    let mut factorial : usize = 1;\n    for i in 1..(number+1) { factorial*=i; }\n    return factorial;\n}\n\npub fn main() {\n    let n = take_int();\n    let r = take_int();\n    println!("{}", combination(n, r));\n}\n')),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Input")),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"6 ",a.createElement("br"),"\n4"),"\n"),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Output")),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"15"),"\n"),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Time Complexity : O( n )")," ",a.createElement("br"),"\n",a.createElement(n.strong,null,"Space Complexity : O( 1 )")),"\n",a.createElement(n.h2,{id:"conclusion",style:{position:"relative"}},a.createElement(n.a,{href:"#conclusion","aria-label":"conclusion permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Conclusion"),"\n",a.createElement(n.p,null,"Combination is the number of ways in which we can ",a.createElement(n.strong,null,"choose")," some objects from the given set of objects.\nIn this article, we saw the frequently used formulae of combinations for given n and r and also made a program to find number of combinations in Rust."),"\n",a.createElement(n.p,null,"Here is the function for easy access"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-rust"},"fn combination(n: usize, r: usize) -> usize{\n    return factorial(n)/(factorial(r) * factorial(n-r));\n}\n\nfn factorial(number : usize) -> usize{\n    let mut factorial : usize = 1;\n    for i in 1..(number+1) { factorial*=i; }\n    return factorial;\n}\n\n")),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Thank You")),"\n","\n",a.createElement(i.H,{title:"Combination - Rust Programming",description:"Combination is the number of ways in which we can choose some objects from the given set of objects. We will see frequently used formulae of combinations and make a program to find number of combinations in Rust."}))}var c=function(e){void 0===e&&(e={});var n=Object.assign({},(0,l.ah)(),e.components).wrapper;return n?a.createElement(n,e,a.createElement(o,e)):o(e)};function m(e){return e.children}function s(e){return a.createElement(m,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-3-combinatorics-combination-mdx-042c1f3e81fe1ae762c7.js.map