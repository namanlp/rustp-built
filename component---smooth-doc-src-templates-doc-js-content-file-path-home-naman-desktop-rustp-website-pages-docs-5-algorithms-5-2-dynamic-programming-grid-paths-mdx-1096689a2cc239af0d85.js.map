{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-5-algorithms-5-2-dynamic-programming-grid-paths-mdx-1096689a2cc239af0d85.js","mappings":"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","sources":["webpack://website/./images/Algorithms/grid-paths.webp","webpack://website/./pages/docs/5 Algorithms/5.2 Dynamic Programming/grid-paths.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/grid-paths-2d615549b618f9ae478dd5761594f793.webp\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport gp from \"../../../../images/Algorithms/grid-paths.webp\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    code: \"code\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"grid-paths-problem\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#grid-paths-problem\",\n    \"aria-label\": \"grid paths problem permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Grid Paths Problem\"), \"\\n\", React.createElement(_components.p, null, \"and Dynamic Programming Solution to it using memoization and tabulation in Rust Language.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"introduction\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Grid Paths is another Dynamic Problem based on grids.\"), \"\\n\", React.createElement(_components.p, null, \"In this problem, you are given a grid with traps / obstacles. You have to tell the number of unique paths to reach from top left to bottom right in the grid, \", React.createElement(_components.strong, null, \"without stepping onto trap\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"You can only move in right and down directions.\"), \"\\n\", React.createElement(_components.p, null, \"This problem is taken from \", React.createElement(\"a\", {\n    href: \"https://cses.fi/problemset/task/1638\"\n  }, \" CSES Problem Set \")), \"\\n\", React.createElement(_components.p, null, \"In the grid, \", React.createElement(_components.code, null, \".\"), \" denotes an empty cell, and \", React.createElement(_components.code, null, \"*\"), \" denotes a trap.\"), \"\\n\", \"\\n\", React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, React.createElement(\"img\", {\n    src: gp,\n    width: \"100%\",\n    alt: \"Grid Paths\"\n  })), \"\\n\", React.createElement(_components.p, null, \"So, for above grid, answer is \", React.createElement(_components.strong, null, \"3\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"recursive-solution\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#recursive-solution\",\n    \"aria-label\": \"recursive solution permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Recursive Solution\"), \"\\n\", React.createElement(_components.p, null, \"In recursive solution, we start from the end, that is, bottom right cell, and take sum of paths of cell upwards and leftwards to it.\"), \"\\n\", React.createElement(_components.p, null, \"If the cell is \", React.createElement(_components.code, null, \"*\"), \" in the grid, we return 0.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm\",\n    \"aria-label\": \"algorithm permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"If the value of cell in grid is \", React.createElement(_components.code, null, \"*\"), \", return 0.\"), \"\\n\", React.createElement(_components.li, null, \"Base Case would be that, if the current grid has 1 column and 1 row, return 1.\"), \"\\n\", React.createElement(_components.li, null, \"If current Grid has 1 row, we can traverse only leftwards. So, return Grid Paths of the left cell.\"), \"\\n\", React.createElement(_components.li, null, \"Similarly, If current Grid has 1 column, we can traverse only upwards. So, return Grid Paths of the upper cell.\"), \"\\n\", React.createElement(_components.li, null, \"Else, return the sum of Grid Paths of left and upper cells.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function\",\n    \"aria-label\": \"function permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\nfn grid_paths(grid:&Vec<Vec<char>>, r:usize, c:usize) -> usize{\\n    // If there is no row or column in the grid, return 0\\n    if r<1 || c < 1 { return 0; }\\n\\n    // If corresponding grid value is *, return 0\\n    if grid[r-1][c-1] == '*' { return 0;}\\n\\n    // Base Case\\n    // If only 1 row and column, return 1\\n    if r == 1 && c==1 { return 1; }\\n\\n    // Recursive Cases\\n    // If only 1 row, can go only left\\n    if r == 1 { return grid_paths(grid, 1, c-1); }\\n\\n    // If only 1 column, can go only up\\n    if c == 1 { return grid_paths(grid, r-1, 1); }\\n\\n    // Else, return sum of upper and left values\\n    return grid_paths(grid, r-1, c) + grid_paths(grid, r, c-1);\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With Driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\n\\nfn grid_paths(grid:&Vec<Vec<char>>, r:usize, c:usize) -> usize{\\n    // If there is no row or column in the grid, return 0\\n    if r<1 || c < 1 { return 0; }\\n\\n    // If corresponding grid value is *, return 0\\n    if grid[r-1][c-1] == '*' { return 0;}\\n\\n    // Base Case\\n    // If only 1 row and column, return 1\\n    if r == 1 && c==1 { return 1; }\\n\\n    // Recursive Cases\\n    // If only 1 row, can go only left\\n    if r == 1 { return grid_paths(grid, 1, c-1); }\\n\\n    // If only 1 column, can go only up\\n    if c == 1 { return grid_paths(grid, r-1, 1); }\\n\\n    // Else, return sum of upper and left values\\n    return grid_paths(grid, r-1, c) + grid_paths(grid, r, c-1);\\n}\\n\\n// Driver Code\\n\\nfn main() {\\n    // Take the sample grid, as shown in picture\\n    let grid = vec![\\n        vec!['.', '.', '.', '.', '.'],\\n        vec!['.', '*', '.', '*', '.'],\\n        vec!['.', '.', '.', '.', '.'],\\n    ];\\n\\n    // Print The number of paths of the grid\\n    println!(\\\"{}\\\", grid_paths(&grid, grid.len(), grid[0].len()));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"3\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( 2\", React.createElement(\"sup\", null, \"r+c\"), \" )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( r+c )\")), \"\\n\", React.createElement(_components.p, null, \"( Space complexity includes recursive stack space )\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"overlapping-sub-problems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#overlapping-sub-problems\",\n    \"aria-label\": \"overlapping sub problems permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Overlapping Sub-problems\"), \"\\n\", React.createElement(_components.p, null, \"If we have a look carefully on recursive approach, we computed multiple results many times.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"For example :\"), \" In a 20×20 grid, you can reach the (10, 10) cell in thousands of ways, and takes thousands of recursions each time to calculate.\"), \"\\n\", React.createElement(_components.p, null, \"These are called \", React.createElement(_components.strong, null, \"Overlapping Sub-problems\"), \" because they are smaller part of large problems, and are computed again and again.\"), \"\\n\", React.createElement(_components.p, null, \"So, we simply calculate them once, and store it in a matrix, and retrieve it when necessary. This helps to save a lot of computation.\"), \"\\n\", React.createElement(_components.p, null, \"This is called Dynamic Programming Approach for the problem.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"memoization--top-down-dp--method\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#memoization--top-down-dp--method\",\n    \"aria-label\": \"memoization  top down dp  method permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Memoization ( Top-down DP ) Method\"), \"\\n\", React.createElement(_components.p, null, \"In memoization method, we simply take a DP matrix, and store the computed result.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm-1\",\n    \"aria-label\": \"algorithm 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Initially, take a DP matrix and set all its elements to \", React.createElement(_components.code, null, \"None\"), \" type. Alternatively, you can set it to -1.\"), \"\\n\", React.createElement(_components.li, null, \"If the grid paths are already calculated, that is given index of matrix is \", React.createElement(_components.code, null, \"Some\"), \" or not -1, return it.\"), \"\\n\", React.createElement(_components.li, null, \"Else, calculate the grid paths by using recursion and store it in the DP matrix.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-1\",\n    \"aria-label\": \"function 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn grid_paths(grid:&Vec<Vec<char>>, r:usize, c:usize,  dp:&mut Vec<Vec<Option<usize>>>) -> usize{\\n    // If there is no row or column in the grid, return 0\\n    if r<1 || c < 1 { return 0; }\\n\\n    // If already computed, return value\\n    if dp[r-1][c-1].is_some() { return dp[r-1][c-1].unwrap(); }\\n\\n    // If corresponding grid value is *, return 0\\n    if grid[r-1][c-1] == '*' { dp[r-1][c-1] = Option::from(0); return 0;}\\n\\n    // Base Case\\n    // If only 1 row and column, return 1\\n    if r == 1 && c==1 { dp[0][0] = Option::from(1); return 1; }\\n\\n    // Recursive Cases\\n    // If only 1 row, can go only left\\n    if r == 1 { dp[0][c-1] = Option::from(grid_paths(grid, 1, c-1, dp)); return dp[0][c-1].unwrap(); }\\n\\n    // If only 1 column, can go only up\\n    if c == 1 { dp[r-1][0] = Option::from( grid_paths(grid, r-1, 1, dp)); return dp[r-1][0].unwrap(); }\\n\\n    // Else, return sum of upper and left values\\n    dp[r-1][c-1] = Option::from(grid_paths(grid, r-1, c, dp) + grid_paths(grid, r, c-1, dp));\\n    return dp[r-1][c-1].unwrap();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With Driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\n\\nfn grid_paths(grid:&Vec<Vec<char>>, r:usize, c:usize,  dp:&mut Vec<Vec<Option<usize>>>) -> usize{\\n    // If there is no row or column in the grid, return 0\\n    if r<1 || c < 1 { return 0; }\\n\\n    // If already computed, return value\\n    if dp[r-1][c-1].is_some() { return dp[r-1][c-1].unwrap(); }\\n\\n    // If corresponding grid value is *, return 0\\n    if grid[r-1][c-1] == '*' { dp[r-1][c-1] = Option::from(0); return 0;}\\n\\n    // Base Case\\n    // If only 1 row and column, return 1\\n    if r == 1 && c==1 { dp[0][0] = Option::from(1); return 1; }\\n\\n    // Recursive Cases\\n    // If only 1 row, can go only left\\n    if r == 1 { dp[0][c-1] = Option::from(grid_paths(grid, 1, c-1, dp)); return dp[0][c-1].unwrap(); }\\n\\n    // If only 1 column, can go only up\\n    if c == 1 { dp[r-1][0] = Option::from( grid_paths(grid, r-1, 1, dp)); return dp[r-1][0].unwrap(); }\\n\\n    // Else, return sum of upper and left values\\n    dp[r-1][c-1] = Option::from(grid_paths(grid, r-1, c, dp) + grid_paths(grid, r, c-1, dp));\\n    return dp[r-1][c-1].unwrap();\\n}\\n\\n// Driver Code\\n\\nfn main() {\\n    // Take the sample grid, as shown in picture\\n    let grid = vec![\\n        vec!['.', '.', '.', '.', '.'],\\n        vec!['.', '*', '.', '*', '.'],\\n        vec!['.', '.', '.', '.', '.'],\\n    ];\\n\\n    // Initialize DP matrix\\n    let mut dp = vec![vec![None; grid[0].len()]; grid.len()];\\n\\n    // Print The number of paths of the grid\\n    println!(\\\"{}\\\", grid_paths(&grid, grid.len(), grid[0].len(), &mut dp));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"3\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( r*c )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( r*c )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"tabulation---bottom-up-dp---method\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tabulation---bottom-up-dp---method\",\n    \"aria-label\": \"tabulation   bottom up dp   method permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Tabulation  ( Bottom-up DP )  Method\"), \"\\n\", React.createElement(_components.p, null, \"Although time and space complexities of tabulation as well as memoization method are same, tabulation is much more efficient as there are a lot of expensive recursive calls in memoization.\"), \"\\n\", React.createElement(_components.p, null, \"In tabulation method, we make the DP matrix, and fill it first on the basis of base condition, and then on the basis of previous row.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm-2\",\n    \"aria-label\": \"algorithm 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Initially, set \", React.createElement(_components.code, null, \"1\"), \" upto first \", React.createElement(_components.code, null, \"*\"), \" in first row and column in DP matrix, and 0 after that.\"), \"\\n\", React.createElement(_components.li, null, \"Now, for each of cell, if the corresponding cell in original grid is \", React.createElement(_components.code, null, \"*\"), \", set it to 0, else sum of upper and left cell in DP matrix.\"), \"\\n\", React.createElement(_components.li, null, \"Finally, return the value of last cell as the answer.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-2\",\n    \"aria-label\": \"function 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\nfn grid_paths(grid:&Vec<Vec<char>>, r:usize, c:usize,  dp:&mut Vec<Vec<Option<usize>>>) -> usize{\\n\\n    // Set the value in the first row upto first * as 1\\n    // Trapped variable stores whether * has come\\n    let mut trapped = false;\\n    for i in 0..c {\\n        if grid[0][i] == '*' { trapped = true; }\\n        // If * has already come\\n        if trapped { dp[0][i] = Option::from(0); }\\n        else { dp[0][i] = Option::from(1); }\\n    }\\n\\n    // Set the value in the first column upto first * as 1\\n    trapped = false;\\n    for i in 0..r {\\n        if grid[i][0] == '*' { trapped = true; }\\n        // If * has already come\\n        if trapped { dp[i][0] = Option::from(0); }\\n        else { dp[i][0] = Option::from(1); }\\n    }\\n\\n    for i in 1..r {\\n        for j in 1..c {\\n            // If *, set dp[i][j] = 0\\n            if grid[i][j] == '*' { dp[i][j] = Option::from(0); continue; }\\n\\n            // Set sum of paths of upper and left cell\\n            dp[i][j] = Option::from(dp[i-1][j].unwrap() + dp[i][j-1].unwrap() );\\n        }\\n    }\\n\\n    // Return last value as answer\\n    return dp[r-1][c-1].unwrap();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Use the same driver code.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"3\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( r*c )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( r*c )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Grid Paths is a grid based Dynamic Programming problem.\"), \"\\n\", React.createElement(_components.p, null, \"In this problem, you are given a grid with traps / obstacles. You have to tell the number of unique paths to reach from top left to bottom right in the grid, \", React.createElement(_components.strong, null, \"without stepping onto trap\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"You can only move in right and down directions.\"), \"\\n\", React.createElement(_components.p, null, \"In this article, we saw how to solve the Grid Paths problem, first using recursion and then using Dynamic Programming, memoization as well as tabulation method in Rust Language.\"), \"\\n\", React.createElement(_components.p, null, \"Here is the optimized function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn grid_paths(grid:&Vec<Vec<char>>, r:usize, c:usize,  dp:&mut Vec<Vec<Option<usize>>>) -> usize{\\n    let mut trapped = false;\\n    for i in 0..c {\\n        if grid[0][i] == '*' { trapped = true; }\\n        if trapped { dp[0][i] = Option::from(0); }  else { dp[0][i] = Option::from(1); } }\\n\\n    trapped = false;\\n    for i in 0..r {\\n        if grid[i][0] == '*' { trapped = true; }\\n        if trapped { dp[i][0] = Option::from(0); } else { dp[i][0] = Option::from(1); } }\\n\\n    for i in 1..r { for j in 1..c {\\n            if grid[i][j] == '*' { dp[i][j] = Option::from(0); continue; }\\n            dp[i][j] = Option::from(dp[i-1][j].unwrap() + dp[i][j-1].unwrap() ); } }\\n    return dp[r-1][c-1].unwrap();\\n}\\n\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"Grid Paths ( CSES ) using Recursion, Memoization and Tabulation - Dynamic Programming - Rust Programming\",\n    description: \"Tell the unique paths from top left to bottom right without stepping on trap in the given grid. We will see recursive, memoization and tabulation DP solution in Rust Language.\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/5 Algorithms/5.2 Dynamic Programming/grid-paths.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","strong","code","h3","ol","li","pre","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","textAlign","src","gp","width","alt","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}