{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-5-algorithms-5-2-dynamic-programming-minimum-path-sum-mdx-2e39507fe89354325360.js","mappings":"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","sources":["webpack://website/./images/Algorithms/minimum-path-sum.webp","webpack://website/./pages/docs/5 Algorithms/5.2 Dynamic Programming/minimum-path-sum.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/minimum-path-sum-e600e435bba58a66b2c3544ab3b7f73a.webp\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport minPS from \"../../../../images/Algorithms/minimum-path-sum.webp\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"minimum-path-sum\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#minimum-path-sum\",\n    \"aria-label\": \"minimum path sum permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Minimum Path Sum\"), \"\\n\", React.createElement(_components.p, null, \"and Dynamic Programming Solution to it using memoization and tabulation in Rust Language.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"introduction\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Minimum Path Sum, also known as Minimum Cost Path, is a grid based Dynamic Programming problem.\\nIn this problem, you are given a grid of positive numbers, and you have to tell the minimum sum of elements from top left corner to bottom right through any path,\\nbut you can move only rightwards or downwards.\"), \"\\n\", \"\\n\", React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, React.createElement(\"img\", {\n    src: minPS,\n    width: \"100%\",\n    alt: \"Minimum Path Sum Grid\"\n  })), \"\\n\", React.createElement(_components.p, null, \"So, for above grid, answer is \", React.createElement(_components.strong, null, \"22\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"recursive-solution\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#recursive-solution\",\n    \"aria-label\": \"recursive solution permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Recursive Solution\"), \"\\n\", React.createElement(_components.p, null, \"In recursive solution, we start from the end, that is, bottom right cell, and take minimum of Minimum Path Sum of the cell upwards and leftwards to it.\"), \"\\n\", React.createElement(_components.p, null, \"So, we find the Minimum Path Sum of upward and leftward cell and return this after adding the cost of current cell.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm\",\n    \"aria-label\": \"algorithm permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Base Case would be that, if the current grid has 1 column and 1 row, return value of current cell.\"), \"\\n\", React.createElement(_components.li, null, \"If current Grid has 1 row, we can traverse only leftwards. So, return cost of current cell + cost of Minimum Path Sum of the left cell.\"), \"\\n\", React.createElement(_components.li, null, \"Similarly, if the grid has only 1 column, return cost of current cell + cost of Minimum Path Sum of the upward cell.\"), \"\\n\", React.createElement(_components.li, null, \"Else, return the cost of current cell + minimum of Minimum Path Sum of the upward cell and leftward cell.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function\",\n    \"aria-label\": \"function permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\npub fn minimum_cost_path(grid: &Vec<Vec<usize>>, r:usize, c:usize) -> usize {\\n\\n    // Base Case, if only 1 row and column, return the value of top left cell\\n    if r == 1 && c ==1 { return grid[0][0]; }\\n\\n    // If only 1 row, we can only move leftwards\\n    if r==1 { return grid[r-1][c-1] + minimum_cost_path(grid,r, c-1 ) ;}\\n\\n    // If only 1 column, we can only move upwards\\n    if c==1 { return grid[r-1][c-1] + minimum_cost_path(grid,r-1, c ); }\\n\\n    // Else, we take minimum of both leftwards path and rightwards path\\n    return grid[r-1][c-1] + min(minimum_cost_path(grid,r-1, c ) , minimum_cost_path(grid,r, c-1 ));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With Driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\npub fn minimum_cost_path(grid: &Vec<Vec<usize>>, r:usize, c:usize) -> usize {\\n\\n    // Base Case, if only 1 row and column, return the value of top left cell\\n    if r == 1 && c ==1 { return grid[0][0]; }\\n\\n    // If only 1 row, we can only move leftwards\\n    if r==1 { return grid[r-1][c-1] + minimum_cost_path(grid,r, c-1 ) ;}\\n\\n    // If only 1 column, we can only move upwards\\n    if c==1 { return grid[r-1][c-1] + minimum_cost_path(grid,r-1, c ); }\\n\\n    // Else, we take minimum of both leftwards path and rightwards path\\n    return grid[r-1][c-1] + min(minimum_cost_path(grid,r-1, c ) , minimum_cost_path(grid,r, c-1 ));\\n}\\n\\n// Driver Code\\n\\nfn main() {\\n    let grid = vec![\\n        vec![2, 4, 1, 5, 6],\\n        vec![3, 3, 2, 6, 7],\\n        vec![1, 4, 5, 3, 5],\\n    ];\\n    println!(\\\"{}\\\", minimum_cost_path(&grid, grid.len(), grid[0].len()));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"22\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( 2\", React.createElement(\"sup\", null, \"r+c\"), \" )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( r+c )\")), \"\\n\", React.createElement(_components.p, null, \"( Space complexity includes recursive stack space )\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note :\"), \" Space complexity is 2\", React.createElement(\"sup\", null, \"r+c\"), \"  because each time, we have 2 choices.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"overlapping-sub-problems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#overlapping-sub-problems\",\n    \"aria-label\": \"overlapping sub problems permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Overlapping Sub-problems\"), \"\\n\", React.createElement(_components.p, null, \"If we have a look carefully on recursive approach, we computed multiple results many times.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"For example :\"), \" In a 20×20 grid, you can reach the (10, 10) cell in thousands of ways, and takes thousands of recursions each time to calculate.\"), \"\\n\", React.createElement(_components.p, null, \"These are called \", React.createElement(_components.strong, null, \"Overlapping Sub-problems\"), \" because they are smaller part of large problems, and are computed again and again.\"), \"\\n\", React.createElement(_components.p, null, \"So, we simply calculate them once, and store it in a matrix, and retrieve it when necessary. This helps to save a lot of computation.\"), \"\\n\", React.createElement(_components.p, null, \"This is called Dynamic Programming Approach for the problem.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"memoization--top-down-dp--method\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#memoization--top-down-dp--method\",\n    \"aria-label\": \"memoization  top down dp  method permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Memoization ( Top-down DP ) Method\"), \"\\n\", React.createElement(_components.p, null, \"In memoization method, we simply take a DP matrix, and store the computed result.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm-1\",\n    \"aria-label\": \"algorithm 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Initially, take a DP matrix and set all its elements to \", React.createElement(_components.code, null, \"None\"), \" type. Alternatively, you can set it to -1.\"), \"\\n\", React.createElement(_components.li, null, \"If the minimum path sum is already calculated, that is given index of matrix is \", React.createElement(_components.code, null, \"Some\"), \" or not -1, return it.\"), \"\\n\", React.createElement(_components.li, null, \"Else, calculate the minimum path sum by using recursion and store it in the DP matrix.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-1\",\n    \"aria-label\": \"function 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\npub fn minimum_cost_path(grid: &Vec<Vec<usize>>, r:usize, c:usize, dp:&mut Vec<Vec<Option<usize>>>) -> usize {\\n\\n    // If Already computed, return it\\n    if dp[r-1][c-1].is_some() { return dp[r-1][c-1].unwrap(); }\\n\\n    // Base Case, if only 1 row and column, return the value of top left cell\\n    if r == 1 && c ==1 { dp[0][0] = Option::from(grid[0][0]) ;return dp[0][0].unwrap();  }\\n\\n    // If only 1 row, we can only move leftwards\\n    if r==1 { dp[0][c-1] = Option::from(grid[0][c-1] + minimum_cost_path(grid,1, c-1 , dp)) ; return dp[0][c-1].unwrap();}\\n\\n    // If only 1 column, we can only move upwards\\n    if c==1 { dp[r-1][0] = Option::from(grid[r-1][0] + minimum_cost_path(grid,r-1, 1 , dp)) ; return dp[r-1][0].unwrap();}\\n\\n    // Else, we take minimum of both leftwards path and rightwards path\\n    dp[r-1][c-1] = Option::from( grid[r-1][c-1] + min(minimum_cost_path(grid,r-1, c, dp ) , minimum_cost_path(grid,r, c-1, dp)) );\\n\\n    return dp[r-1][c-1].unwrap();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With Driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\npub fn minimum_cost_path(grid: &Vec<Vec<usize>>, r:usize, c:usize, dp:&mut Vec<Vec<Option<usize>>>) -> usize {\\n\\n    // If Already computed, return it\\n    if dp[r-1][c-1].is_some() { return dp[r-1][c-1].unwrap(); }\\n\\n    // Base Case, if only 1 row and column, return the value of top left cell\\n    if r == 1 && c ==1 { dp[0][0] = Option::from(grid[0][0]) ;return dp[0][0].unwrap();  }\\n\\n    // If only 1 row, we can only move leftwards\\n    if r==1 { dp[0][c-1] = Option::from(grid[0][c-1] + minimum_cost_path(grid,1, c-1 , dp)) ; return dp[0][c-1].unwrap();}\\n\\n    // If only 1 column, we can only move upwards\\n    if c==1 { dp[r-1][0] = Option::from(grid[r-1][0] + minimum_cost_path(grid,r-1, 1 , dp)) ; return dp[r-1][0].unwrap();}\\n\\n    // Else, we take minimum of both leftwards path and rightwards path\\n    dp[r-1][c-1] = Option::from( grid[r-1][c-1] + min(minimum_cost_path(grid,r-1, c, dp ) , minimum_cost_path(grid,r, c-1, dp)) );\\n\\n    return dp[r-1][c-1].unwrap();\\n}\\n\\n// Driver Code\\n\\nfn main() {\\n    let grid = vec![\\n        vec![2, 4, 1, 5, 6],\\n        vec![3, 3, 2, 6, 7],\\n        vec![1, 4, 5, 3, 5],\\n    ];\\n\\n    // Initialize DP matrix\\n    let mut dp = vec![vec![Option::None; grid[0].len()]; grid.len()];\\n\\n    println!(\\\"{}\\\", minimum_cost_path(&grid, grid.len(), grid[0].len(), &mut dp));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"22\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( r*c )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( r*c )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"tabulation---bottom-up-dp---method\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tabulation---bottom-up-dp---method\",\n    \"aria-label\": \"tabulation   bottom up dp   method permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Tabulation  ( Bottom-up DP )  Method\"), \"\\n\", React.createElement(_components.p, null, \"Although time and space complexities of tabulation as well as memoization method are same, tabulation is much more efficient as there are a lot of expensive recursive calls in memoization.\"), \"\\n\", React.createElement(_components.p, null, \"In tabulation method, we make the DP matrix, and fill it first on the basis of base condition, and then on the basis of previous row.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm-2\",\n    \"aria-label\": \"algorithm 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Initialize the first row and first column like \", React.createElement(_components.a, {\n    href: \"/array-algorithms/prefix-sum-array/\"\n  }, \"Prefix Sum Array\"), \", because to reach to given cell in first row or column, we have only 1 path, rightwards in case of row and downwards in case of column.\"), \"\\n\", React.createElement(_components.li, null, \"For all cells in DP matrix, set its value to the sum of its corresponding value in initial grid and minimum of adjacent left and up cell.\"), \"\\n\", React.createElement(_components.li, null, \"Finally, return the bottom right value of the DP matrix.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-2\",\n    \"aria-label\": \"function 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\npub fn minimum_cost_path(grid: &Vec<Vec<usize>>, r:usize, c:usize, dp:&mut Vec<Vec<Option<usize>>>) -> usize {\\n\\n    // Set dp[0][0], the first element of DP matrix as corresponding grid value.\\n    dp[0][0] = Option::from(grid[0][0]);\\n\\n    // Initialize the first row and column of the DP matrix\\n    for i in 1..r { dp[i][0] = Option::from(dp[i-1][0].unwrap() + grid[i][0]); }\\n    for i in 1..c { dp[0][i] = Option::from(dp[0][i-1].unwrap() + grid[0][i]); }\\n\\n    // Traverse for each Row and column\\n    for i in 1..r {\\n        for j in 1..c {\\n            // Set dp[i][j] as sum of corresponding grid value and\\n            // Minimum of minimum path sum of upper and left cell\\n            dp[i][j] = Option::from(grid[i][j] + min(dp[i-1][j].unwrap(), dp[i][j-1].unwrap()));\\n        }\\n    }\\n\\n    // Finally, Return last element\\n    return dp[r-1][c-1].unwrap();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Use the same driver code.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"22\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( r*c )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( r*c )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Minimum Path Sum, also known as Minimum Cost Path, is a grid based Dynamic Programming problem.\"), \"\\n\", React.createElement(_components.p, null, \"In this problem, you are given a grid of positive numbers, and you have to tell the minimum sum of elements from top left corner to bottom right through any path,\\nbut you can move only rightwards or downwards.\"), \"\\n\", React.createElement(_components.p, null, \"In this article, we saw how to solve the Minimum Path Sum problem, first using recursion and then using Dynamic Programming, memoization as well as tabulation method in Rust Language.\"), \"\\n\", React.createElement(_components.p, null, \"Here is the optimized function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\npub fn minimum_cost_path(grid: &Vec<Vec<usize>>, r:usize, c:usize, dp:&mut Vec<Vec<Option<usize>>>) -> usize {\\n    dp[0][0] = Option::from(grid[0][0]);\\n    for i in 1..r { dp[i][0] = Option::from(dp[i-1][0].unwrap() + grid[i][0]); }\\n    for i in 1..c { dp[0][i] = Option::from(dp[0][i-1].unwrap() + grid[0][i]); }\\n    for i in 1..r {\\n        for j in 1..c {\\n            dp[i][j] = Option::from(grid[i][j] + min(dp[i-1][j].unwrap(), dp[i][j-1].unwrap())); }}\\n    return dp[r-1][c-1].unwrap();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Thank You\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \" Minimum Path Sum using Recursion, Memoization and Tabulation - Dynamic Programming - Rust Programming\",\n    description: \"In Minimum Path Sum problem, you have to tell the minimum sum of elements from top left corner to bottom right. We will see recursive, memoization and tabulation DP solution in Rust Language..\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/5 Algorithms/5.2 Dynamic Programming/minimum-path-sum.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","strong","h3","ol","li","pre","code","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","textAlign","src","minPS","width","alt","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}