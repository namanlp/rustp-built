{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-5-algorithms-5-2-dynamic-programming-minimum-coin-change-mdx-3473b2153c9a002f2b5b.js","mappings":"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","sources":["webpack://website/./pages/docs/5 Algorithms/5.2 Dynamic Programming/minimum-coin-change.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    em: \"em\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"minimum-coin-change-problem\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#minimum-coin-change-problem\",\n    \"aria-label\": \"minimum coin change problem permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Minimum Coin Change Problem\"), \"\\n\", React.createElement(_components.p, null, \"and space optimized Dynamic Programming Solution using tabulation and memoization in Rust Language.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"introduction\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Minimum Coin change is another classical Dynamic Programming problem and is very similar to \", React.createElement(_components.a, {\n    href: \"/dynamic-programming/coin-change/\"\n  }, \"Coin Change Problem\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"In this problem, you are given coins of various denomination, and each coin has infinite supply.\"), \"\\n\", React.createElement(_components.p, null, \"You have to tell \", React.createElement(_components.strong, null, \"Minimum number of coins\"), \" that you can use to make the exact amount.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"For Example :\"), \" If coins are [1, 3, 4] and the amount is 6, the answer should be \", React.createElement(_components.strong, null, \"2\"), \", because you can form the sum using coins [3, 3]\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"recursive-solution\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#recursive-solution\",\n    \"aria-label\": \"recursive solution permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Recursive Solution\"), \"\\n\", React.createElement(_components.p, null, \"Recursive solution to this problem is pretty straightforward. At each step, you have 2 choices :\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Exclude the given coin :\"), \" We can exclude the given coin and find the answer with the remaining coins. In this, we simply call recursion using same amount, but n-1 coins.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Include the given coin :\"), \" We can include the coin and again call recursion by reducing amount, but on same number of coins, because we can include and exclude same coin again.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"We have to take minimum of both the cases.\"), \"\\n\", React.createElement(_components.p, null, \"If amount is 0, we can form it using 0 coins.\"), \"\\n\", React.createElement(_components.p, null, \"Also, if n is 0 and amount is not 0, we can not make the money. Hence, return Infinite value. We will take 10\", React.createElement(\"sup\", null, \"10\"), \" as our \", React.createElement(_components.em, null, \"infinite\"), \" value for this question.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function\",\n    \"aria-label\": \"function permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\nfn min_coin_change(coins:&Vec<usize>, amount : usize, n:usize) -> usize{\\n\\n    let infinite = 10_000_000_000;\\n    // If amount is 0, we can make it without using coins\\n    if amount == 0 { return 0; }\\n\\n    // If no coins left, but amount is not 0, we can not make the amount.\\n    // Hence, return infinite value\\n    if n==0 { return infinite; }\\n\\n    // If current coin is greater than amount, we can not include it\\n    // Hence, compute recursively the coins of n-1\\n    if coins[n-1] > amount {\\n        return min_coin_change(coins, amount, n-1);\\n    }\\n\\n    // Now we can either exclude or include current coin\\n    // If exclude, answer would be the min_coin_change of n-1 items\\n    // If include, answer would be reduce the amount by denomination\\n    // And calculate the min_coin_change of n items.\\n    // Because we can include the coin again\\n\\n    // Return minimum of both cases.\\n    return min(min_coin_change(coins, amount, n-1),1+min_coin_change(coins, amount-coins[n-1], n));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\nfn min_coin_change(coins:&Vec<usize>, amount : usize, n:usize) -> usize{\\n\\n    let infinite = 10_000_000_000;\\n    // If amount is 0, we can make it without using coins\\n    if amount == 0 { return 0; }\\n\\n    // If no coins left, but amount is not 0, we can not make the amount.\\n    // Hence, return infinite value\\n    if n==0 { return infinite; }\\n\\n    // If current coin is greater than amount, we can not include it\\n    // Hence, compute recursively the coins of n-1\\n    if coins[n-1] > amount {\\n        return min_coin_change(coins, amount, n-1);\\n    }\\n\\n    // Now we can either exclude or include current coin\\n    // If exclude, answer would be the min_coin_change of n-1 items\\n    // If include, answer would be reduce the amount by denomination\\n    // And calculate the min_coin_change of n items.\\n    // Because we can include the coin again\\n\\n    // Return minimum of both cases.\\n    return min(min_coin_change(coins, amount, n-1),1+min_coin_change(coins, amount-coins[n-1], n));\\n}\\n\\n\\n// Driver Code\\n\\nuse std::io;\\nfn take_vector() -> Vec<usize> {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let arr: Vec<usize> = input.trim().split_whitespace()\\n        .map(|x| x.parse().unwrap()).collect();\\n    return arr;\\n}\\n\\nfn main() {\\n    let coins = take_vector();\\n    let amount = take_vector()[0];\\n    let ans  = min_coin_change(&coins, amount, coins.len());\\n\\n    // If answer is infinity, we have to print -1\\n    if ans >= 1_000_000_000 { println!(\\\"-1\\\"); }\\n    else { println!(\\\"{}\\\", ans); }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"1 3 4 \", React.createElement(\"br\"), \"\\n6\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( 2\", React.createElement(\"sup\", null, \"n\"), \" )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( n )\")), \"\\n\", React.createElement(_components.p, null, \"( Space complexity includes recursive stack space )\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"overlapping-sub-problems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#overlapping-sub-problems\",\n    \"aria-label\": \"overlapping sub problems permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Overlapping Sub-problems\"), \"\\n\", React.createElement(_components.p, null, \"If we have a look carefully on recursive approach, we computed multiple results many times.\"), \"\\n\", React.createElement(_components.p, null, \"For example, if coins are [1, 2, 3, 6, 12] and amount is 24, the result for n = 2 and amount = 12 is calculated 4 times, and takes many recursions each time.\\nThese are called overlapping sub-problems, because it is a sub-problem of actual problem and is overlapping in multiple recursions.\"), \"\\n\", React.createElement(_components.p, null, \"To prevent this, we can store the output and each result will be calculated only once.\"), \"\\n\", React.createElement(_components.p, null, \"In minimum coin change problem, we can create a dp matrix, and store each value by coin index and amount. That is, if we consider first \", React.createElement(_components.code, null, \"i\"), \" coins, the result will be stored at dp[i][amount].\"), \"\\n\", React.createElement(_components.p, null, \"This is called memoization or Top-down Dynamic Programming.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"memoization--top-down-dp--method\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#memoization--top-down-dp--method\",\n    \"aria-label\": \"memoization  top down dp  method permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Memoization ( Top-down DP ) Method\"), \"\\n\", React.createElement(_components.p, null, \"In memoization method, we simply take a DP matrix, and store the computed result.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm\",\n    \"aria-label\": \"algorithm permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"If the stored value for given number of coins and amount in DP matrix is not \", React.createElement(_components.code, null, \"None\"), \", we return the value.\"), \"\\n\", React.createElement(_components.li, null, \"If the amount is 0, return 0 and if n is 0 and amount > 0, return infinity.\"), \"\\n\", React.createElement(_components.li, null, \"Else, use recursive logic to calculate the given value and store it in the DP matrix.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-1\",\n    \"aria-label\": \"function 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\nfn min_coin_change(coins:&Vec<usize>, amount : usize, n:usize, dp : &mut Vec<Vec<Option<usize>>>) -> usize{\\n\\n    let infinite = 10_000_000_000;\\n    // If amount is 0, we can make it without using coins\\n    if amount == 0 { return 0; }\\n\\n    // If no coins left, but amount is not 0, we can not make the amount.\\n    // Hence, return infinite value\\n    if n==0 { return infinite; }\\n\\n    // If already computed the value, return it\\n    if dp[n][amount].is_some() {\\n        return dp[n][amount].unwrap();\\n    }\\n\\n    // If current coin is greater than amount, we can not include it\\n    // Hence, compute recursively the coins of n-1\\n    if coins[n-1] > amount {\\n        dp[n][amount] = Option::from(min_coin_change(coins, amount, n-1, dp));\\n        return dp[n][amount].unwrap();\\n    }\\n\\n    // Now we can either exclude or include current coin\\n    // If exclude, answer would be the min_coin_change of n-1 items\\n    // If include, answer would be reduce the amount by denomination\\n    // And calculate the min_coin_change of n items.\\n    // Because we can include the coin again\\n\\n    // Return minimum of both cases.\\n    dp[n][amount] =Option::from( min(min_coin_change(coins, amount, n-1, dp),1+min_coin_change(coins, amount-coins[n-1], n, dp)) );\\n    return dp[n][amount].unwrap();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\nfn min_coin_change(coins:&Vec<usize>, amount : usize, n:usize, dp : &mut Vec<Vec<Option<usize>>>) -> usize{\\n\\n    let infinite = 10_000_000_000;\\n    // If amount is 0, we can make it without using coins\\n    if amount == 0 { return 0; }\\n\\n    // If no coins left, but amount is not 0, we can not make the amount.\\n    // Hence, return infinite value\\n    if n==0 { return infinite; }\\n\\n    // If already computed the value, return it\\n    if dp[n][amount].is_some() {\\n        return dp[n][amount].unwrap();\\n    }\\n\\n    // If current coin is greater than amount, we can not include it\\n    // Hence, compute recursively the coins of n-1\\n    if coins[n-1] > amount {\\n        dp[n][amount] = Option::from(min_coin_change(coins, amount, n-1, dp));\\n        return dp[n][amount].unwrap();\\n    }\\n\\n    // Now we can either exclude or include current coin\\n    // If exclude, answer would be the min_coin_change of n-1 items\\n    // If include, answer would be reduce the amount by denomination\\n    // And calculate the min_coin_change of n items.\\n    // Because we can include the coin again\\n\\n    // Return minimum of both cases.\\n    dp[n][amount] =Option::from( min(min_coin_change(coins, amount, n-1, dp),1+min_coin_change(coins, amount-coins[n-1], n, dp)) );\\n    return dp[n][amount].unwrap();\\n}\\n\\n\\n// Driver Code\\n\\nuse std::io;\\nfn take_vector() -> Vec<usize> {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let arr: Vec<usize> = input.trim().split_whitespace()\\n        .map(|x| x.parse().unwrap()).collect();\\n    return arr;\\n}\\n\\nfn main() {\\n    let coins = take_vector();\\n    let amount = take_vector()[0];\\n\\n    // Make a DP Matrix\\n    // Initially set all the elements to None\\n    let mut dp = vec![vec![Option::None; amount+1 ]; coins.len()+1];\\n\\n    let ans  = min_coin_change(&coins, amount, coins.len(), &mut dp);\\n\\n    // If answer is infinity, we have to print -1\\n    if ans >= 1_000_000_000 { println!(\\\"-1\\\"); }\\n    else { println!(\\\"{}\\\", ans); }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"1 3 4 \", React.createElement(\"br\"), \"\\n6\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( n×amount )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( n×amount )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"tabulation---bottom-up-dp---method\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tabulation---bottom-up-dp---method\",\n    \"aria-label\": \"tabulation   bottom up dp   method permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Tabulation  ( Bottom-up DP )  Method\"), \"\\n\", React.createElement(_components.p, null, \"Although time and space complexities of tabulation as well as memoization method are same, tabulation is much more efficient as there are a lot of expensive recursive calls in memoization.\"), \"\\n\", React.createElement(_components.p, null, \"In tabulation method, we make the matrix, and fill it first on the basis of base condition, and then on the basis of previous row.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm-1\",\n    \"aria-label\": \"algorithm 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Initially, set first row to infinity, because if n == 0, we can not make amount, except when amount = 0.  Also, set first column as \", React.createElement(_components.strong, null, \"0\"), \", because if amount is 0, there is always amount can be formed in 1 step.\"), \"\\n\", React.createElement(_components.li, null, \"For all the amount for a given value of n, run below statement 3 and 4.\"), \"\\n\", React.createElement(_components.li, null, \"Set the values before the coin value as copied from above row, because we can not include a coin if its value is less than the amount.\"), \"\\n\", React.createElement(_components.li, null, \"Set the value of dp[i][amount] as minimum of including and excluding the given coin.\"), \"\\n\", React.createElement(_components.li, null, \"Return the dp[n][amount] as the final answer.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-2\",\n    \"aria-label\": \"function 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\nfn min_coin_change(coins:&Vec<usize>, amount : usize, n:usize) -> usize{\\n\\n    // Initially, set whole matrix to infinity\\n    let infinite = 10_000_000_000;\\n    let mut dp = vec![vec![infinite; amount+1]; n+1];\\n\\n    // Set the first column to 0, because if amount is 0, we can make the amount\\n    for i in 0..n+1 { dp[i][0] = 0; }\\n\\n    // Run loop for all the i from 1 to n\\n    for i in 1..n+1 {\\n        // Run loop for each amount below coins[n-1], set above row\\n        for j in 1..min(coins[i-1], amount+1){ dp[i][j] = dp[i-1][j]; }\\n\\n        // Now, for larger amount, we can both include and exclude.\\n        // So, we take minimum of both cases\\n        for j in coins[i-1]..amount+1 {\\n            dp[i][j] = min(1+dp[i][j-coins[i-1]] , dp[i-1][j]);\\n        }\\n    }\\n\\n    // Return The answer\\n    dp[n][amount]\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Use the same driver code as recursive solution.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"1 3 4 \", React.createElement(\"br\"), \"\\n6\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( n×amount )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( n×amount )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"space-optimized-tabulation-method\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#space-optimized-tabulation-method\",\n    \"aria-label\": \"space optimized tabulation method permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Space Optimized Tabulation Method\"), \"\\n\", React.createElement(_components.p, null, \"If we observe the above tabulation method carefully, we find that for calculating the minimum coin change for a given amount and number of coins, only \", React.createElement(_components.strong, null, \"current and previous row\"), \" is required.\"), \"\\n\", React.createElement(_components.p, null, \"In the above algorithm, step 1 is base case or initialization step, and do not require any other row.\"), \"\\n\", React.createElement(_components.p, null, \"Step 3 and Step 4 requires only previous and current row.\"), \"\\n\", React.createElement(_components.p, null, \"Hence, we can optimize our space complexity, by storing only the previous row instead of the whole matrix.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-3\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-3\",\n    \"aria-label\": \"function 3 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using space optimization of tabulation method.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\n\\nfn min_coin_change(coins:&Vec<usize>, amount : usize, n:usize) -> usize{\\n\\n    // Initially, set previous as well as current to infinity\\n    let infinite = 10_000_000_000;\\n\\n    let mut prev = vec![infinite; amount+1];\\n    let mut curr = vec![infinite; amount+1];\\n\\n    // Set the first column to 0, because if amount is 0, we can make the amount\\n    prev[0] = 0;\\n    curr[0] = 0;\\n\\n    // Run loop for all the i from 1 to n\\n    for i in 1..n+1 {\\n        // Run loop for each amount below coins[n-1], set above row\\n        for j in 1..min(coins[i-1], amount+1){ curr[j] = prev[j]; }\\n\\n        // Now, for larger amount, we can both include and exclude.\\n        // So, we take minimum of both cases\\n        for j in coins[i-1]..amount+1 {\\n            curr[j] = min(1+curr[j-coins[i-1]] , prev[j]);\\n        }\\n\\n        // Move the elements from current to previous\\n        for j in 0..amount+1 { prev[j] = curr[j];}\\n    }\\n\\n    // Return The answer\\n    curr[amount]\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Use the same driver code as recursive solution.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"1 3 4 \", React.createElement(\"br\"), \"\\n6\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( n×amount )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( amount )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Minimum Coin change is another classical Dynamic Programming problem and is very similar to \", React.createElement(_components.a, {\n    href: \"/dynamic-programming/coin-change/\"\n  }, \"Coin Change Problem\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"In this problem, you are given coins of various denomination, and each coin has infinite supply.\"), \"\\n\", React.createElement(_components.p, null, \"You have to tell \", React.createElement(_components.strong, null, \"Minimum number of coins\"), \" that you can use to make the exact amount.\"), \"\\n\", React.createElement(_components.p, null, \"In this article, we saw how to solve the minimum coin change problem, first using recursion and then using Dynamic Programming, memoization as well as tabulation method, and latter the space optimized tabulation method in Rust Language.\"), \"\\n\", React.createElement(_components.p, null, \"Here is the optimized function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::min;\\nfn min_coin_change(coins:&Vec<usize>, amt : usize, n:usize) -> usize{\\n    let inf = 10_000_000_000;\\n    let mut p = vec![inf; amt+1];\\n    let mut c = vec![inf; amt+1];\\n    p[0] = 0; c[0] = 0;\\n    for i in 1..n+1 {\\n        for j in 1..min(coins[i-1], amt+1){ c[j] = p[j]; }\\n        for j in coins[i-1]..amt+1 { c[j] = min(1+c[j-coins[i-1]] , p[j]); }\\n        for j in 0..amt+1 { p[j] = c[j];}\\n    }\\n    c[amt]\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Thank You\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"Minimum Coin Change with Space Optimization - DP - Rust Programming\",\n    description: \"Tell minimum number of coins to make exact amount. We will see recursion, memoization, tabulation and space optimized DP solution in Rust Language.\",\n    img: \"https://rustp.org/Static_Images_DND/Social/Min_Coin_Change_Social.png\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/5 Algorithms/5.2 Dynamic Programming/minimum-coin-change.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","strong","ol","li","em","h3","pre","code","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","SEO","title","description","img","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}