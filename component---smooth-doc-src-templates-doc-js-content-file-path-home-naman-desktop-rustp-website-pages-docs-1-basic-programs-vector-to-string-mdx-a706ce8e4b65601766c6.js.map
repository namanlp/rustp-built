{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-1-basic-programs-vector-to-string-mdx-a706ce8e4b65601766c6.js","mappings":"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","sources":["webpack://website/./pages/docs/1 Basic Programs/vector-to-string.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    strong: \"strong\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"function-to-convert-vector-of-characters-to-string\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-to-convert-vector-of-characters-to-string\",\n    \"aria-label\": \"function to convert vector of characters to string permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function to convert Vector of characters to String\"), \"\\n\", React.createElement(_components.p, null, \"for competitive programming and more in Rust\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"introduction\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"In the previous article, we saw that how can we \", React.createElement(_components.a, {\n    href: \"/basic-programs/string-to-vector/\"\n  }, \"convert a string to vector of characters in Rust\"), \" . Now, we must be able to convert the vector back to string for various purposes like for output in CP.\"), \"\\n\", React.createElement(_components.p, null, \"So, in this article, we will see How to convert vector of characters to strings in Rust, and build a function for the same.\"), \"\\n\", React.createElement(_components.p, null, \"This article is going to be rather small because it is just 1 line function.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"convert-vector-of-char-to-string\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#convert-vector-of-char-to-string\",\n    \"aria-label\": \"convert vector of char to string permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Convert Vector of \", React.createElement(_components.code, null, \"char\"), \" to String\"), \"\\n\", React.createElement(_components.p, null, \"We can simply use \", React.createElement(_components.code, null, \"collect::<String>()\"), \" function to convert Vector of chars to the string. Here is function for this approach\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn to_string(vec:Vec<char>) -> String{\\n    return vec.iter().collect::<String>();\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With Driver code, this looks like\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"// For converting vector to string\\nfn to_string(vec:Vec<char>) -> String{\\n    return vec.iter().collect::<String>();\\n}\\n\\n// Driver code\\n\\nfn main() {\\n    let str1 = vec!['H', 'e', 'l', 'l', 'o'];\\n    println!(\\\"{}\\\", to_string(str1));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Hello\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"In the above code, \", React.createElement(_components.code, null, \".iter()\"), \" is used to traverse through the vector. See \", React.createElement(_components.a, {\n    href: \"https://doc.rust-lang.org/stable/std/iter/#the-three-forms-of-iteration\"\n  }, \"Iterator in Rust Documentation\")), \"\\n\", React.createElement(_components.p, null, \"And  \", React.createElement(_components.code, null, \"collect::<String>()\"), \"  function is used to convert an iterator into a String.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"For many applications as well as competitive programming output, it is very handy to have a function to convert a vector to a string, especially for showing output. In this article, we made such a function using \", React.createElement(_components.code, null, \"iter().collect()\"), \" method in Rust.\"), \"\\n\", React.createElement(_components.p, null, \"Here is function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn to_string(vec:Vec<char>) -> String{return vec.iter().collect::<String>();}\\n\")), \"\\n\", React.createElement(_components.p, null, \"You might want to add this function to your template, if you are doing competitive programming in rust.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Thank You\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"Function to convert Vector of characters to String - Rust Programming\",\n    description: \"For many applications and competitive programming output, it is very handy to have a function to convert a vector to a string. We make such a function here using iter().collect() method in Rust.\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/1 Basic Programs/vector-to-string.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","code","pre","strong","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}