{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-5-algorithms-5-2-dynamic-programming-longest-common-subsequence-mdx-0bc809d172ede3311d32.js","mappings":"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","sources":["webpack://website/./pages/docs/5 Algorithms/5.2 Dynamic Programming/Longest-Common-Subsequence.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    code: \"code\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"longest-common-subsequence--lcs-\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#longest-common-subsequence--lcs-\",\n    \"aria-label\": \"longest common subsequence  lcs  permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Longest Common Subsequence ( LCS )\"), \"\\n\", React.createElement(_components.p, null, \"and program to find Longest Common Subsequence using Dynamic Programming in Rust.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"introduction\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#introduction\",\n    \"aria-label\": \"introduction permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Introduction\"), \"\\n\", React.createElement(_components.p, null, \"Longest Common Subsequence is a classical Dynamic Programming problem, in which we have to find the length of longest common subsequence of the given strings.\"), \"\\n\", React.createElement(_components.p, null, \"Subsequence of a string is defined as a string, that is formed by removing 1 or more elements from the original string.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"For Example :\"), \" For the string \\\"RUSTP\\\", the strings \\\"RUST\\\", \\\"RP\\\", \\\"R\\\", \\\"UP\\\" etc. are subsequences, but the strings \\\"PT\\\", \\\"Z\\\", \\\"TS\\\"\"), \"\\n\", React.createElement(_components.p, null, \"So, we are given 2 strings, say \", React.createElement(_components.code, null, \"string1\"), \" and \", React.createElement(_components.code, null, \"string2\"), \" we have to find length of Longest Common Subsequence.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"For Example :\"), \" If \", React.createElement(_components.code, null, \"string1\"), \" = \\\"abcdef\\\" and \", React.createElement(_components.code, null, \"string2\"), \" = \\\"acfbde\\\", the longest common subsequence is \\\"abde\\\", so answer is 4.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note :\"), \" In Rust Language, the \", React.createElement(_components.code, null, \"String\"), \" is UTF-8 encoded by default, hence, indexing is not possible in \", React.createElement(_components.code, null, \"String\"), \" type. Hence, we use \", React.createElement(_components.strong, null, React.createElement(_components.code, null, \"Vec<char>\")), \" instead.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"recursive-solution\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#recursive-solution\",\n    \"aria-label\": \"recursive solution permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Recursive Solution\"), \"\\n\", React.createElement(_components.p, null, \"Before jumping into dynamic programming solution, we will first have a look at recursive solution.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm\",\n    \"aria-label\": \"algorithm permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.p, null, \"In recursive solution, we apply the given algorithm.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"If the last character of both the string is same, we must include it to our solution and recursively find the LCS of remaining string.\"), \"\\n\", React.createElement(_components.li, null, \"Else, we first check by removing last character from first string and then the last character from second string, and return the maximum of both the cases.\"), \"\\n\", React.createElement(_components.li, null, \"Repeat steps 1 and 2 till either of string is empty.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function\",\n    \"aria-label\": \"function permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn longest_common_subsequence(string1:&Vec<char>, string2:&Vec<char>, n:usize, m:usize) -> usize {\\n\\n    // If there is no character in any of the string, return 0\\n    if n==0 || m==0 {\\n        return 0;\\n    }\\n\\n    // If last character of both strings is same, we include that in our lcs\\n    // Hence, we return 1 + lcs of remaining parts of both strings\\n    if string1[n-1] == string2[m-1] {\\n        return 1+longest_common_subsequence(string1, string2, n-1, m-1);\\n    }\\n\\n    // Now, if the last character is not same, we check by removing 1 letter from each string\\n    // And return their max as answer\\n    return max( longest_common_subsequence(string1, string2, n-1, m),\\n                longest_common_subsequence(string1, string2, n, m-1));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::max;\\nuse std::io;\\n\\nfn longest_common_subsequence(string1:&Vec<char>, string2:&Vec<char>, n:usize, m:usize) -> usize {\\n\\n    // If there is no character in any of the string, return 0\\n    if n==0 || m==0 {\\n        return 0;\\n    }\\n\\n    // If last character of both strings is same, we include that in our lcs\\n    // Hence, we return 1 + lcs of remaining parts of both strings\\n    if string1[n-1] == string2[m-1] {\\n        return 1+longest_common_subsequence(string1, string2, n-1, m-1);\\n    }\\n\\n    // Now, if the last character is not same, we check by removing 1 letter from each string\\n    // And return their max as answer\\n    return max( longest_common_subsequence(string1, string2, n-1, m),\\n                longest_common_subsequence(string1, string2, n, m-1));\\n}\\n// Driver Code\\n\\n// Take vector of characters\\nfn take_string() -> Vec<char> {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let vec:Vec<char> = input.trim().chars().collect();\\n    return vec;\\n}\\n\\nfn main() {\\n\\n    // Input String\\n    let string1 = take_string();\\n    let string2 = take_string();\\n\\n    // Print the length of longest common subsequence\\n    println!(\\\"Length of longest common subsequence is : {}\\\",\\n             longest_common_subsequence(&string1, &string2, string1.len(), string2.len()));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"abcdef \", React.createElement(\"br\"), \"\\nacfbde\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Length of longest common subsequence is : 4\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( 2\", React.createElement(\"sup\", null, \"m+n\"), \" )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( m+n )\")), \"\\n\", React.createElement(_components.p, null, \"( Space complexity includes recursive stack space )\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"overlapping-sub-problems\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#overlapping-sub-problems\",\n    \"aria-label\": \"overlapping sub problems permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Overlapping Sub-problems\"), \"\\n\", React.createElement(_components.p, null, \"If we have a look carefully on recursive approach, we computed the LCS of multiple subsequence or substrings of original strings again and again. This is called overlapping sub-problems.\"), \"\\n\", React.createElement(_components.p, null, \"For example, if we have to compute LCS of strings \", React.createElement(_components.code, null, \"abcdefghi\"), \" and \", React.createElement(_components.code, null, \"jklmnopqr\"), \", the LCS of strings \", React.createElement(_components.code, null, \"abcd\"), \" and \", React.createElement(_components.code, null, \"jklm\"), \" is computed more than 1000 times, and takes hundreds of iterations each time.\"), \"\\n\", React.createElement(_components.p, null, \"So, we simply store the result for each sub-problem, and return it if it is already computed, hence preventing it computing again and again.\"), \"\\n\", React.createElement(_components.p, null, \"In the LCS problem, we take 2D matrix, such that matrix[i][j] contains the length of LCS of first \", React.createElement(_components.code, null, \"i\"), \" characters of string1 with first \", React.createElement(_components.code, null, \"j\"), \" characters of string2.\"), \"\\n\", React.createElement(_components.p, null, \"For example, if the string1 is \", React.createElement(_components.code, null, \"abcdef\"), \" and string 2 is \", React.createElement(_components.code, null, \"acfbde\"), \", then matrix[3][4] will contain length of LCS of strings \", React.createElement(_components.code, null, \"abc\"), \" and \", React.createElement(_components.code, null, \"acfb\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"memoization--top-down-dp--method\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#memoization--top-down-dp--method\",\n    \"aria-label\": \"memoization  top down dp  method permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Memoization ( Top-down DP ) Method\"), \"\\n\", React.createElement(_components.p, null, \"In memoization method, we simply take a DP matrix, and store the computed result.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm-1\",\n    \"aria-label\": \"algorithm 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Initially, set all the elements of dp matrix to -1. ( We do not set it to 0 because LCS of completely mismatch strings is also 0. Hence it will compute again and again)\"), \"\\n\", React.createElement(_components.li, null, \"If the length of LCS has already been found and stored in matrix, return the length of LCS.\"), \"\\n\", React.createElement(_components.li, null, \"Else, compute the length of LCS and store it in DP matrix at dp[i][j], where i is length of string1 and j is length of string2.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-1\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-1\",\n    \"aria-label\": \"function 1 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn longest_common_subsequence(string1:&Vec<char>, string2:&Vec<char>, n:usize, m:usize, dp:&mut Vec<Vec<i64>>) -> i64 {\\n\\n    // If there is no character in any of the string, return 0\\n    if n==0 || m==0 {\\n        return 0;\\n    }\\n\\n    // If already computed, return computed value\\n    if dp[n][m]!=-1 {\\n        return dp[n][m];\\n    }\\n\\n    // If last character of both strings is same, we include that in our lcs\\n    // Hence, we return 1 + lcs of remaining parts of both strings\\n    if string1[n-1] == string2[m-1] {\\n        dp[n][m] = 1+longest_common_subsequence(string1, string2, n-1, m-1, dp);\\n        return dp[n][m];\\n    }\\n\\n    // Now, if the last character is not same, we check by removing 1 letter from each string\\n    // And return their max as answer\\n    dp[n][m] = max( longest_common_subsequence(string1, string2, n-1, m, dp),\\n                    longest_common_subsequence(string1, string2, n, m-1, dp));\\n    return dp[n][m];\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With Driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::cmp::max;\\nuse std::io;\\n\\nfn longest_common_subsequence(string1:&Vec<char>, string2:&Vec<char>, n:usize, m:usize, dp:&mut Vec<Vec<i64>>) -> i64 {\\n\\n    // If there is no character in any of the string, return 0\\n    if n==0 || m==0 {\\n        return 0;\\n    }\\n\\n    // If already computed, return computed value\\n    if dp[n][m]!=-1 {\\n        return dp[n][m];\\n    }\\n\\n    // If last character of both strings is same, we include that in our lcs\\n    // Hence, we return 1 + lcs of remaining parts of both strings\\n    if string1[n-1] == string2[m-1] {\\n        dp[n][m] = 1+longest_common_subsequence(string1, string2, n-1, m-1, dp);\\n        return dp[n][m];\\n    }\\n\\n    // Now, if the last character is not same, we check by removing 1 letter from each string\\n    // And return their max as answer\\n    dp[n][m] = max( longest_common_subsequence(string1, string2, n-1, m, dp),\\n                    longest_common_subsequence(string1, string2, n, m-1, dp));\\n    return dp[n][m];\\n}\\n\\n// Driver Code\\n\\n// Take vector of characters\\nfn take_string() -> Vec<char> {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let vec:Vec<char> = input.trim().chars().collect();\\n    return vec;\\n}\\n\\nfn main() {\\n\\n    // Input String\\n    let string1 = take_string();\\n    let string2 = take_string();\\n\\n    // Make a DP array\\n    let n = string1.len();\\n    let m = string2.len();\\n\\n    // We are making a vector of vectors with n rows and m columns\\n    // We set each element to -1 initially\\n    // If we take 0, its complexity will become 2^(m+n) in the worst case\\n    // Because if strings mismatch, there LCS is also 0\\n    let mut dp = vec![vec![-1 as i64; m+1];n+1];\\n\\n    // Print the length of longest common subsequence\\n    println!(\\\"Length of longest common subsequence is : {}\\\",\\n             longest_common_subsequence(&string1, &string2, string1.len(), string2.len() , &mut dp));\\n\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"abcdef \", React.createElement(\"br\"), \"\\nacfbde\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Length of longest common subsequence is : 4\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( m*n )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( m*n )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"tabulation---bottom-up-dp---method\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#tabulation---bottom-up-dp---method\",\n    \"aria-label\": \"tabulation   bottom up dp   method permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Tabulation  ( Bottom-up DP )  Method\"), \"\\n\", React.createElement(_components.p, null, \"Although time and space complexities of tabulation as well as memoization method are same, tabulation is much more efficient as there are a lot of expensive recursive calls in memoization.\"), \"\\n\", React.createElement(_components.p, null, \"In tabulation method, we make the matrix, and fill it on the basis of base condition, and then on the basis of LCS of previous values.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"algorithm-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm-2\",\n    \"aria-label\": \"algorithm 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Initially, set all the elements of all the columns and rows to 0, because LCS = 0 if either of string is empty.\"), \"\\n\", React.createElement(_components.li, null, \"For i\", React.createElement(\"sup\", null, \"th\"), \" row and j\", React.createElement(\"sup\", null, \"th\"), \" column, if string1[i] == string2[j], then set dp[i][j] = 1+dp[i-1][j-1].\"), \"\\n\", React.createElement(_components.li, null, \"Else, set dp[i][j] = maximum of dp[i][j-1] and dp[i-1][j]\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"If we traverse the matrix either row-wise or column-wise, it is always guaranteed that dp[i-1][j-1], dp[i][j-1] and dp[i-1][j] are already processed, hence ensuring our answer is correct.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"function-2\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#function-2\",\n    \"aria-label\": \"function 2 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Function\"), \"\\n\", React.createElement(_components.p, null, \"Here is the function using above algorithm\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn longest_common_subsequence(string1:&Vec<char>, string2:&Vec<char>, n:usize, m:usize, dp:&mut Vec<Vec<i64>>) -> i64 {\\n\\n    // Set all the elements in 0th row and column to 0\\n    for i in 0..m+1 { dp[0][i] = 0; }\\n    for i in 0..n+1 { dp[i][0] = 0; }\\n\\n    // Traverse each row and column, row wise\\n\\n    for i in 1..n+1 {\\n        for j in 1..m+1 {\\n\\n            // If both string have same character, dp[i][j] = dp[i-1][j-1]\\n            if string1[i-1] == string2[j-1] {\\n                dp[i][j] = 1+dp[i-1][j-1];\\n            }\\n\\n            // Else, find maximum of dp[i-1][j] and dp[i][j-1]\\n            else {\\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);\\n            }\\n\\n        }\\n    }\\n\\n    return dp[n][m];\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Use the same driver code.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"abcdef \", React.createElement(\"br\"), \"\\nacfbde\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Length of longest common subsequence is : 4\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( m*n )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( m*n )\")), \"\\n\", React.createElement(_components.p, null, \"Though time and space complexities are same as memoization method, yet it is much more optimized than memoization method.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Longest Common Subsequence is a classical Dynamic Programming problem, in which we have to find the length of longest common subsequence of the given strings.\"), \"\\n\", React.createElement(_components.p, null, \"In this article, we saw how to find Longest Common Subsequence ( LCS ) of two strings, first using Recursion and then using Dynamic Programming methods, Memoization as well as Tabulation method in Rust Language.\"), \"\\n\", React.createElement(_components.p, null, \"Here is the optimized function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn longest_common_subsequence(string1:&Vec<char>, string2:&Vec<char>, n:usize, m:usize, dp:&mut Vec<Vec<i64>>) -> i64 {\\n    for i in 0..m+1 { dp[0][i] = 0; }\\n    for i in 0..n+1 { dp[i][0] = 0; }\\n    for i in 1..n+1 {\\n        for j in 1..m+1 {\\n            if string1[i-1] == string2[j-1] { dp[i][j] = 1+dp[i-1][j-1]; }\\n            else { dp[i][j] = max(dp[i-1][j], dp[i][j-1]); }\\n        }\\n    }\\n    return dp[n][m];\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Thank You\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"Longest Common Subsequence ( LCS ) using Memoization and Tabulation - Dynamic Programming - Rust Programming\",\n    description: \"In this article, we will see how to find length of Longest Common Subsequence of given strings, first using recursion, and then using dynamic programming methods, Memoization as well as Tabulation, in Rust Language\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/5 Algorithms/5.2 Dynamic Programming/Longest-Common-Subsequence.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","strong","code","h3","ol","li","pre","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}