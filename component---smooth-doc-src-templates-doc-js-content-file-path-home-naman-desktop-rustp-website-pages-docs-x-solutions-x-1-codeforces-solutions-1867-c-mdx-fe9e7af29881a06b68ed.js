"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[404],{63338:function(e,n,t){t.r(n),t.d(n,{default:function(){return s}});var a=t(27378),l=t(20951),r=t(88957);function i(e){var n=Object.assign({h1:"h1",a:"a",div:"div",p:"p",h2:"h2",strong:"strong",code:"code",pre:"pre"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,{id:"c-salyg1n-and-the-mex-game",style:{position:"relative"}},a.createElement(n.a,{href:"#c-salyg1n-and-the-mex-game","aria-label":"c salyg1n and the mex game permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"C. Salyg1n and the MEX Game"),"\n",a.createElement(n.p,null,"and solution of this problem with proof in Rust Language"),"\n",a.createElement(n.h2,{id:"introduction",style:{position:"relative"}},a.createElement(n.a,{href:"#introduction","aria-label":"introduction permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Introduction"),"\n",a.createElement(n.p,null,"In this article, we will see my solution to the codeforces problem, ",a.createElement(n.a,{href:"https://codeforces.com/contest/1867/problem/C"},"1867C. Salyg1n and the MEX Game"),", which came in Codeforces Round 897 (Div. 2)."),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"This is an interactive problem!")),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Note :")," My Solution might not be the most optimized one, but it is certainly working."),"\n",a.createElement(n.p,null,"You can go to above link to view the question statement."),"\n",a.createElement(n.h2,{id:"approach",style:{position:"relative"}},a.createElement(n.a,{href:"#approach","aria-label":"approach permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Approach"),"\n",a.createElement(n.p,null,"In this problem, we can see that we can each time add a number, and a number less than that will be removed in next turn, until we add minimum number."),"\n",a.createElement(n.p,null,"So, we have to add ",a.createElement(n.strong,null,"the mex of the array")," each time, till we reach the 0."),"\n",a.createElement(n.h2,{id:"proof",style:{position:"relative"}},a.createElement(n.a,{href:"#proof","aria-label":"proof permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Proof"),"\n",a.createElement(n.p,null,"Let us suppose to the contradiction that adding mex is not the optimal solution. This means that we can add ",a.createElement(n.code,null,"x")," that can become mex, also there is an element ",a.createElement(n.code,null,"y")," which is current mex."),"\n",a.createElement(n.p,null,"Then, Bob can remove an element from the array, such that there are 2 elements less than ",a.createElement(n.code,null,"x")," missing from the array."),"\n",a.createElement(n.p,null,"As Alice can only add 1 element at a time, after which, 1 element will be removed from the array, so net change in elements less than ",a.createElement(n.code,null,"x")," is at max 1."),"\n",a.createElement(n.p,null,"Hence, we can say that there is always a missing element less than ",a.createElement(n.code,null,"x"),", so mex will always be less than ",a.createElement(n.code,null,"x"),"."),"\n",a.createElement(n.p,null,"But this contradicts our assumption."),"\n",a.createElement(n.p,null,"Hence, we have to add mex each time."),"\n",a.createElement(n.p,null,"Hence Proved."),"\n",a.createElement(n.h2,{id:"implementation",style:{position:"relative"}},a.createElement(n.a,{href:"#implementation","aria-label":"implementation permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Implementation"),"\n",a.createElement(n.p,null,"We first find the mex of the array. Then we output it. Now, we take the input and print it, till -1, because the element removed will be new mex."),"\n",a.createElement(n.h2,{id:"program",style:{position:"relative"}},a.createElement(n.a,{href:"#program","aria-label":"program permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Program"),"\n",a.createElement(n.p,null,"Program using above implementation is"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-rust"},'/*\nThis template is made by Naman Garg <naman.rustp@gmail.com>\nGitHub : https://github.com/namanlp\nGitLab : https://gitlab.com/namanlp\nWebsite : https://rustp.org\n\nYou can visit https://rustp.org/basic-programs/basic-template/\nfor understanding the template\n\nFeel free to copy the template, but not the solutions :D\nThank You\n */\n\n#![allow(unused)]\n\nuse std::io::stdin;\n\nfn take_int() -> i128 {\n    let mut input = String::new();\n    stdin().read_line(&mut input).unwrap();\n    return input.trim().parse().unwrap();\n}\n\nfn take_vector() -> Vec<usize> {\n    let mut input = String::new();\n    stdin().read_line(&mut input).unwrap();\n    let arr: Vec<usize> = input.trim().split_whitespace().map(|x| x.parse().unwrap()).collect();\n    return arr;\n}\n\n// Find Mex function\n\nfn find_mex(arr:&Vec<usize>) ->usize{\n    // If missing element is less than largest element\n    for i in 0..arr.len() { if arr[i]!=i { return i;} }\n\n    // Else, if all elements present upto n-1, return n\n    // For example array is 0, 1, 2, return 3\n    return arr.len();\n}\n\nfn solve() {\n// ======================= Code Here =========================\n    let _n = take_int();\n    let mut arr = take_vector();\n\n    // Sort the vector and find the mex\n    arr.sort();\n    let mex = find_mex(&arr) as i128;\n\n    println!("{}", mex);\n    let mut choice = take_int();\n\n    // Print the input, till we reach -1\n    while choice >= 0 {\n        println!("{}", choice);\n        choice = take_int();\n    }\n}\n\npub fn main() {\n    let t = take_int();\n    for _ in 0..t { solve(); }\n}\n')),"\n",a.createElement(n.h2,{id:"conclusion",style:{position:"relative"}},a.createElement(n.a,{href:"#conclusion","aria-label":"conclusion permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Conclusion"),"\n",a.createElement(n.p,null,"In this article, we discussed solution to Codeforces problem 1867C. Salyg1n and the MEX Game along with proof and program in Rust Language."),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Thank You")),"\n","\n",a.createElement(r.H,{title:"Codeforces 1867C. Salyg1n and the MEX Game solution with proof - Rust Programming",description:"In this article, we will discuss solution to Codeforces problem 1867C. Salyg1n and the MEX Game along with proof."}))}var o=function(e){void 0===e&&(e={});var n=Object.assign({},(0,l.ah)(),e.components).wrapper;return n?a.createElement(n,e,a.createElement(i,e)):i(e)};function c(e){return e.children}function s(e){return a.createElement(c,e,a.createElement(o,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-x-solutions-x-1-codeforces-solutions-1867-c-mdx-fe9e7af29881a06b68ed.js.map