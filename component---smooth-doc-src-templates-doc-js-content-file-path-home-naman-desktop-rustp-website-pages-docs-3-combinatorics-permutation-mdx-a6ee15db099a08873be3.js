"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2313],{35972:function(e,n,t){t.r(n),t.d(n,{default:function(){return u}});var a=t(27378),r=t(20951),l=t.p+"static/permutations-1affab49d7a857ef46efe65499c88629.webp",i=t(88957);function o(e){var n=Object.assign({h1:"h1",a:"a",div:"div",p:"p",h2:"h2",strong:"strong",em:"em",h3:"h3",ol:"ol",li:"li",pre:"pre",code:"code",blockquote:"blockquote"},(0,r.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.h1,{id:"permutation",style:{position:"relative"}},a.createElement(n.a,{href:"#permutation","aria-label":"permutation permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Permutation"),"\n",a.createElement(n.p,null,"and program to find the Permutation in Rust"),"\n",a.createElement(n.h2,{id:"what-is-permutation",style:{position:"relative"}},a.createElement(n.a,{href:"#what-is-permutation","aria-label":"what is permutation permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"What is Permutation"),"\n",a.createElement(n.p,null,"Permutation is the number of ways in which some of the objects from a given set can be ",a.createElement(n.strong,null,"chosen and arranged"),". In permutation, the order in which things are arranged also matters, unlike in combination."),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"For example :")," Permutation of word RUST are RSTU, RSUT, RTSU, RTUS ..... 24 ways"),"\n",a.createElement(n.p,null,"If you want to read more about what Permutation means, I would recommend you to read from any High School Mathematics book of your preference."),"\n",a.createElement(n.p,null,"In this article, we will use standard reference : the number of total objects to be arranged are denoted by ",a.createElement(n.strong,null,"n")," and the number of items chosen at a time are denoted by ",a.createElement(n.strong,null,"r"),"."),"\n",a.createElement(n.p,null,"So, total number of ways of arranging ",a.createElement(n.em,null,"n")," unique items taking ",a.createElement(n.em,null,"r")," at a time is written ",a.createElement(n.strong,null,a.createElement("sup",null,"n"),"P",a.createElement("sub",null,"r")),". It will also be written as ",a.createElement(n.strong,null,"P(n, r)")),"\n","\n",a.createElement("div",{style:{textAlign:"center"}},a.createElement("img",{src:l,width:"100%",alt:"Permutation of RUST"})),"\n",a.createElement(n.h2,{id:"permutation-formulae",style:{position:"relative"}},a.createElement(n.a,{href:"#permutation-formulae","aria-label":"permutation formulae permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Permutation formulae"),"\n",a.createElement(n.h3,{id:"when-all-objects-are-distinct",style:{position:"relative"}},a.createElement(n.a,{href:"#when-all-objects-are-distinct","aria-label":"when all objects are distinct permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"When all Objects are distinct"),"\n",a.createElement(n.ol,null,"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"When repetition is allowed :")," If Repetition of an object is allowed, then we can simply write number of permutations = ",a.createElement(n.strong,null,"n",a.createElement("sup",null,"r")),". We can calculate it using Exponent or Power function."),"\n"),"\n",a.createElement(n.li,null,"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"When repetition is not allowed :")," If Repetition of an object is not allowed, then permutations can be written as  ",a.createElement(n.strong,null,a.createElement("sup",null,"n"),"P",a.createElement("sub",null,"r")," = n! / (n-r)!")," We can calculate it using ",a.createElement(n.a,{href:"combinatorics/factorial-of-number/"},"Factorial function")),"\n"),"\n"),"\n",a.createElement(n.h3,{id:"when-some-objects-are-identical",style:{position:"relative"}},a.createElement(n.a,{href:"#when-some-objects-are-identical","aria-label":"when some objects are identical permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"When some objects are identical"),"\n",a.createElement(n.ol,{start:"3"},"\n",a.createElement(n.li,null,a.createElement(n.strong,null,"When repetition is allowed :")," If Repetition of an object is allowed, then we can simply write number of permutations = ",a.createElement(n.strong,null,"k",a.createElement("sup",null,"r")),", where k are total number of unique objects. We can calculate it using Exponent or Power function."),"\n",a.createElement(n.li,null,a.createElement(n.strong,null,"When repetition is not allowed :")," If repetition is not allowed, but there are ",a.createElement(n.em,null,"n",a.createElement("sub",null,"1"))," identical objects of type 1, ",a.createElement(n.em,null,"n",a.createElement("sub",null,"2"))," objects of type 2 ... ",a.createElement(n.em,null,"n",a.createElement("sub",null,"k"))," objects of type k, then total permutations of all objects are"),"\n"),"\n",a.createElement("center",null," n! / n",a.createElement("sub",null,"1"),"! × n",a.createElement("sub",null,"2"),"! × ... n",a.createElement("sub",null,"k"),"!  "),"\n",a.createElement(n.h2,{id:"program-to-find-permutation",style:{position:"relative"}},a.createElement(n.a,{href:"#program-to-find-permutation","aria-label":"program to find permutation permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Program to find Permutation"),"\n",a.createElement(n.p,null,"Now, let us write a program in Rust Language to find the number of permutations when we are given ",a.createElement(n.em,null,"n")," distinct objects, and we can arrange ",a.createElement(n.em,null,"r")," at a time."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-rust"},"fn permutation(n: i128, r: i128) -> i128{\n    // nPr = n! / (n-r)!\n    return factorial(n)/factorial(n-r);\n}\n")),"\n",a.createElement(n.p,null,"With driver code"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-rust"},'\nfn permutation(n: i128, r: i128) -> i128{\n    // nPr = n! / (n-r)!\n    return factorial(n)/factorial(n-r);\n}\n\n// Driver code\n\nuse std::io::stdin;\nfn take_int() -> i128 {\n    let mut input = String::new();\n    stdin().read_line(&mut input).unwrap();\n    return input.trim().parse().unwrap();\n}\nfn factorial(number : i128) -> i128{\n    let mut factorial : i128 = 1;\n    for i in 1..(number+1) { factorial*=i; }\n    return factorial;\n}\n\npub fn main() {\n    let n = take_int();\n    let r = take_int();\n    println!("{}", permutation(n, r));\n}\n')),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Input")),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"6 ",a.createElement("br"),"\n4"),"\n"),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Output")),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"360"),"\n"),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Time Complexity : O( n )")," ",a.createElement("br"),"\n",a.createElement(n.strong,null,"Space Complexity : O( 1 )")),"\n",a.createElement(n.h2,{id:"conclusion",style:{position:"relative"}},a.createElement(n.a,{href:"#conclusion","aria-label":"conclusion permalink",className:"anchor before"},a.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Conclusion"),"\n",a.createElement(n.p,null,"Permutation is the number of ways in which some of the objects from a given set can be ",a.createElement(n.strong,null,"chosen and arranged."),"\nIn this article, we saw the formulae for calculating number of permutation for given n and r and also made a program to find number of permutations in Rust."),"\n",a.createElement(n.p,null,"Here is the function for easy access"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-rust"},"fn factorial(number : i128) -> i128{\n    let mut factorial : i128 = 1;\n    for i in 1..(number+1) { factorial*=i; }\n    return factorial;\n}\n\nfn permutation(n: i128, r: i128) -> i128{\n    return factorial(n)/factorial(n-r);\n}\n\n")),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Thank You")),"\n","\n",a.createElement(i.H,{title:"Permutations - Rust Programming",description:"Permutation is the number of ways in which some of the objects from a given set can be chosen and arranged. We will see permutation formulae and also write a program to find number of permutations in Rust."}))}var c=function(e){void 0===e&&(e={});var n=Object.assign({},(0,r.ah)(),e.components).wrapper;return n?a.createElement(n,e,a.createElement(o,e)):o(e)};function m(e){return e.children}function u(e){return a.createElement(m,e,a.createElement(c,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-3-combinatorics-permutation-mdx-a6ee15db099a08873be3.js.map