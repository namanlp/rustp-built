{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-2-number-theory-2-1-arithematic-operations-modular-exponentiation-mdx-4e19e2393ff705c127b9.js","mappings":"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","sources":["webpack://website/./pages/docs/2 Number Theory/2.1 Arithematic Operations/modular-exponentiation.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"modular-exponentiation-in-rust\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#modular-exponentiation-in-rust\",\n    \"aria-label\": \"modular exponentiation in rust permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Modular Exponentiation in Rust\"), \"\\n\", React.createElement(_components.p, null, \"And its Program in Rust\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"what-is-modular-exponentiation\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#what-is-modular-exponentiation\",\n    \"aria-label\": \"what is modular exponentiation permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"What is Modular Exponentiation\"), \"\\n\", React.createElement(_components.p, null, \"Many times, we have to compute exponents of a given number for various purposes. But it is notable that overflow may occur for large values. Largest number that we can store with numerical data type in rust is \", React.createElement(_components.strong, null, React.createElement(\"code\", null, \"2\", React.createElement(\"sup\", null, \"128\"))), \", and is 2\", React.createElement(\"sup\", null, \"64\"), \" in C / C++.\"), \"\\n\", React.createElement(_components.p, null, \"Now, suppose, in some question, we have to find \", React.createElement(_components.strong, null, React.createElement(\"code\", null, \"2\", React.createElement(\"sup\", null, \"1000\"))), \" modulo 1000000007. If we try to first compute \", React.createElement(_components.strong, null, React.createElement(\"code\", null, \"2\", React.createElement(\"sup\", null, \"1000\"))), \" and then find modulo, rust will throw overflow error.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-python\"\n  }, \"thread 'main' panicked at 'attempt to multiply with overflow', src/iterative.rs:10:9\\n\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"problem-statement\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#problem-statement\",\n    \"aria-label\": \"problem statement permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Problem statement\"), \"\\n\", React.createElement(_components.p, null, \"Given three numbers n, x and p, compute n\", React.createElement(\"sup\", null, \"x\"), \"  modulo p.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"naive-approach\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#naive-approach\",\n    \"aria-label\": \"naive approach permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Naive Approach\"), \"\\n\", React.createElement(_components.p, null, \"Simplest solution to this would be to take 1, and multiply it with n, x times, and find modulo p each time. From \", React.createElement(_components.a, {\n    href: \"/number-theory/modular-multiplication/#2-multiplication-property\"\n  }, \"Modular Multiplication\"), \", we already know that\"), \"\\n\", React.createElement(\"center\", null, \" \", React.createElement(\"b\", null, \"(a x b) mod m = ((a mod m) x (b mod m)) mod m\"), \" \"), \"\\n\", React.createElement(_components.p, null, \"But this will be done in \", React.createElement(_components.strong, null, \"O( x )\"), \" or \", React.createElement(_components.strong, null, \"Linear time complexity.\")), \"\\n\", React.createElement(_components.p, null, \"Here's the code for this approach\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn modular_exponent(n:i128 , x:i128 , p:i128) -> i128{\\n    // Initialize ans = 1\\n    let mut ans = 1;\\n\\n    // Multiply ans with n, x times, ans modulo\\n    for _ in 0..x {\\n        ans *= n;\\n        ans%=p;\\n    }\\n\\n    // Return ans\\n    return ans;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"With Driver Code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn modular_exponent(n:i128 , x:i128 , p:i128) -> i128{\\n    // Initialize ans = 1\\n    let mut ans = 1;\\n\\n    // Multiply ans with n, x times, ans modulo\\n    for _ in 0..x {\\n        ans *= n;\\n        ans%=p;\\n    }\\n\\n    // Return ans\\n    return ans;\\n}\\n\\n// Driver Code\\n\\nuse std::io;\\n\\nfn take_int() -> i128 {\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    return input.trim().parse().unwrap();\\n}\\n\\nfn main() {\\n    let n = take_int();\\n    let x = take_int();\\n    let p = take_int();\\n\\n    println!(\\\"{}\\\", modular_exponent(n, x, p));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2 \", React.createElement(\"br\"), \"\\n100000 \", React.createElement(\"br\"), \"\\n1000000007 \", React.createElement(\"br\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"607723520\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( x )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( 1 )\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"efficient-divide-and-conquer-solution\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#efficient-divide-and-conquer-solution\",\n    \"aria-label\": \"efficient divide and conquer solution permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Efficient Divide and Conquer solution\"), \"\\n\", React.createElement(_components.p, null, \"We can find the modular exponentiation in logarithmic time complexity, using  Divide and Conqueror approach.\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"approach\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#approach\",\n    \"aria-label\": \"approach permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Approach\"), \"\\n\", React.createElement(_components.p, null, \"We know that mathematically,\"), \"\\n\", React.createElement(\"center\", null, \" \", React.createElement(\"b\", null, \" n\", React.createElement(\"sup\", null, \"a.b\"), \" = (n\", React.createElement(\"sup\", null, \"a\"), \" )\", React.createElement(\"sup\", null, \" b \"), \" \"), \" \"), \"\\n\", React.createElement(_components.p, null, \"So, let's suppose we have to find n\", React.createElement(\"sup\", null, \"x\"), \" and x = 2.y, so, we can find ( n \", React.createElement(\"sup\", null, \" 2 \"), \" ) \", React.createElement(\"sup\", null, \" y \"), \". \", React.createElement(\"br\"), \" \", React.createElement(_components.strong, null, \"In y + 1 steps or x/2 + 1 steps\")), \"\\n\", React.createElement(_components.p, null, React.createElement(\"center\", null, \" \", React.createElement(\"b\", null, \" n\", React.createElement(\"sup\", null, \"2.y\"), \" = (n\", React.createElement(\"sup\", null, \"2\"), \" )\", React.createElement(\"sup\", null, \" y \"), \" \"), \" \"), \"\\nHence, we multiply n by itself, if x is even.\"), \"\\n\", React.createElement(_components.p, null, \"If, on the other hand, x is odd number \", React.createElement(_components.strong, null, \"it is guaranteed that x-1 will be even number\"), \", hence, we multiply answer by n, if x is odd, and reduce x by 1.\"), \"\\n\", React.createElement(\"hr\"), \"\\n\", React.createElement(_components.h3, {\n    id: \"algorithm\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#algorithm\",\n    \"aria-label\": \"algorithm permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Algorithm\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"If x <= 0, return 1.\"), \"\\n\", React.createElement(_components.li, null, \"If x is 1, return (answer * n) % p\"), \"\\n\", React.createElement(_components.li, null, \"If x  > 1 and even, change n to n\", React.createElement(\"sup\", null, \"2\"), \", change x to x/2, and go to step 2\"), \"\\n\", React.createElement(_components.li, null, \"If X > 1 and odd, multiply answer by n and store answer modulo p, and reduce x to x-1 and go to step 2.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"program-for-modular-exponentiation-in-rust\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#program-for-modular-exponentiation-in-rust\",\n    \"aria-label\": \"program for modular exponentiation in rust permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Program for Modular Exponentiation in Rust\"), \"\\n\", React.createElement(_components.p, null, \"Implementation of above algorithm is written below\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\nfn modular_exponent(mut n:i128 ,mut x:i128 , p:i128) -> i128{\\n    // Initialize ans = 1\\n    let mut ans = 1;\\n\\n    // x is 0, return 1\\n    if x<=0 {\\n        return 1;\\n    }\\n\\n    // use loop statement in rust for infinite loop\\n    loop {\\n        // Step 2. If x is 1, return (answer * n) % p\\n        if x==1 {\\n            return (ans * n) % p;\\n        }\\n\\n        // Step 3. If x > 1 and even, change n to n^2, change x to x/2, and go to step 2\\n\\n        // for checking if x is even, we check the LSB. is 0 or 1\\n        // Alternatively, we can also check x%2, but this is more efficient\\n        if x&1==0 {\\n            n=( n * n ) % p;\\n            x>>=1; // or x = x/2\\n            continue;\\n        }\\n\\n        // Step 4. If X > 1 and odd, multiply answer by n and store answer modulo p,\\n        // and reduce x to x-1 and go to step 2.\\n        else {\\n            ans = (ans*n) % p;\\n            x-=1;\\n        }\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2 \", React.createElement(\"br\"), \"\\n100000 \", React.createElement(\"br\"), \"\\n1000000007 \", React.createElement(\"br\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"607723520\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( log \", React.createElement(\"sub\", null, \" 2 \"), \" x)\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( 1 )\")), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Modular exponentiation is very frequently used concept in competitive programming for computing the answer.\\nIn this article, we made a program for modular exponentiation in rust in logarithmic time complexity instead of linear time complexity using Divide and Conquer approach. Here's the function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"\\nfn modular_exponent(mut n:i128 ,mut x:i128 , p:i128) -> i128{\\n    let mut ans = 1;\\n    if x<=0 { return 1; }\\n    loop {\\n        if x==1 { return (ans * n) % p; }\\n        if x&1==0 { n=( n * n ) % p; x>>=1;continue; }\\n        else { ans = (ans*n) % p;x-=1; }\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Thank You\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"Modular Exponentiation - Rust Programming\",\n    description: \"Modular exponentiation is very frequently used concept in competitive programming. Here is the program for modular exponentiation in rust in logarithmic time complexity instead of linear using Divide and Conquer\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/2 Number Theory/2.1 Arithematic Operations/modular-exponentiation.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","strong","pre","code","blockquote","h3","ol","li","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}