{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-2-number-theory-2-2-factors-of-number-prime-factorization-of-a-number-mdx-83fbca7fb99d6a8934a7.js","mappings":"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","sources":["webpack://website/./images/Number Theory/prime-factorization.webp","webpack://website/./pages/docs/2 Number Theory/2.2 Factors Of Number/prime-factorization-of-a-number.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/prime-factorization-f3ed92b4fa7cd7ec955709a8dee4e696.webp\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport primeFactorization from \"../../../../images/Number Theory/prime-factorization.webp\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"prime-factorization-of-a-natural-number\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#prime-factorization-of-a-natural-number\",\n    \"aria-label\": \"prime factorization of a natural number permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Prime Factorization of a natural number\"), \"\\n\", React.createElement(_components.p, null, \"And a program in Rust to list all the prime factors of a natural number\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"what-is-prime-factorization-of-a-number\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#what-is-prime-factorization-of-a-number\",\n    \"aria-label\": \"what is prime factorization of a number permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"What is Prime Factorization of a number\"), \"\\n\", React.createElement(_components.p, null, \"Prime Factorization of a natural number is splitting the number into its factors, which are prime numbers. It can also be understood as writing a natural number as the product of prime numbers.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"For Example :\"), \"  100 = 2\", React.createElement(\"sup\", null, \"2\"), \" Ã— 5\", React.createElement(\"sup\", null, \"2\")), \"\\n\", \"\\n\", React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, React.createElement(\"img\", {\n    src: primeFactorization,\n    width: \"100%\",\n    alt: \"Prime Factorization of 720\"\n  })), \"\\n\", React.createElement(_components.h2, {\n    id: \"approach\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#approach\",\n    \"aria-label\": \"approach permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Approach\"), \"\\n\", React.createElement(_components.p, null, \"Using BTreeMap\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"While number is divisible by 2, add 2 to prime factors and divide the number by 2.\"), \"\\n\", React.createElement(_components.li, null, \"Now, number is odd number. So, start from 3, and go till square root of number,  perform the step 3.\"), \"\\n\", React.createElement(_components.li, null, \"While i divides number, simply add i to prime factors.\"), \"\\n\", React.createElement(_components.li, null, \"If the number, after loop, does not become 1, number that is left, itself is a prime number.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"program\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#program\",\n    \"aria-label\": \"program permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Program\"), \"\\n\", React.createElement(_components.p, null, \"Program using above approach is given below :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"pub fn prime_factorization(mut number:i128) -> BTreeMap<i128, i128> {\\n    let mut prime_factors: BTreeMap<i128, i128> = BTreeMap::new();\\n\\n    // Step 1 : Divide by 2\\n    let mut freq:i128 = 0;\\n\\n    // You can use number % 2 == 0 also,\\n    // but this method is much more efficient\\n    while number&1 == 0 {\\n        number >>=1;\\n        // Again, You can use number /= 2 also,\\n        // but this is much more efficient\\n        freq+=1;\\n    }\\n\\n    if freq > 0 {\\n        prime_factors.insert(2, freq);\\n    }\\n\\n    // Step 2 : start from 3, and go till square root of number\\n    let mut i = 3;\\n    while i*i <= number {\\n\\n        // Step 3 : Check if i is factor of number\\n        if number%i==0 {\\n            freq = 0;\\n            while number%i==0 {\\n                number/=i;\\n                freq+=1;\\n            }\\n            prime_factors.insert(i, freq);\\n        }\\n        i+=2;\\n    }\\n\\n    // Step 4 : Check if number become 1 or not\\n    if number > 1 {\\n        prime_factors.insert(number, 1);\\n    }\\n\\n    return prime_factors;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Program With Driver Code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::collections::BTreeMap;\\nuse std::io::stdin;\\n\\nfn take_int() -> i128 {\\n    let mut input = String::new();\\n    stdin().read_line(&mut input).unwrap();\\n    input.trim().parse().unwrap()\\n}\\n\\n// Magic starts here\\n\\npub fn prime_factorization(mut number:i128) -> BTreeMap<i128, i128> {\\n    let mut prime_factors: BTreeMap<i128, i128> = BTreeMap::new();\\n\\n    // Step 1 : Divide by 2\\n    let mut freq:i128 = 0;\\n\\n    // You can use number % 2 == 0 also,\\n    // but this method is much more efficient\\n    while number&1 == 0 {\\n        number >>=1;\\n        // Again, You can use number /= 2 also,\\n        // but this is much more efficient\\n        freq+=1;\\n    }\\n\\n    if freq > 0 {\\n        prime_factors.insert(2, freq);\\n    }\\n\\n    // Step 2 : start from 3, and go till square root of number\\n    let mut i = 3;\\n    while i*i <= number {\\n\\n        // Step 3 : Check if i is factor of number\\n        if number%i==0 {\\n            freq = 0;\\n            while number%i==0 {\\n                number/=i;\\n                freq+=1;\\n            }\\n            prime_factors.insert(i, freq);\\n        }\\n        i+=2;\\n    }\\n\\n    // Step 4 : Check if number become 1 or not\\n    if number > 1 {\\n        prime_factors.insert(number, 1);\\n    }\\n\\n    return prime_factors;\\n}\\n\\n// Driver Code Starts\\n\\npub fn main() {\\n    // Take input\\n    let number = take_int();\\n\\n    // Call Our function\\n    let prime_factors = prime_factorization(number);\\n\\n    // Print result\\n    for (key, value) in prime_factors {\\n        println!(\\\"{} appears {} time\\\", key, value);\\n    }\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"720\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"2 appears 4 time \", React.createElement(\"br\"), \"\\n3 appears 2 time \", React.createElement(\"br\"), \"\\n5 appears 1 time\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( sqrt(n) )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( sqrt(n) )\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note :\"), \" We can print the number instead of storing into the BtreeMap, to reduce \", React.createElement(_components.strong, null, \"Space Complexity to O(1)\"), \" but it is rarely useful. BTreeMap or vector of prime factors is far more useful in real applications, so I will demonstrate BTreeMap, instead of printing directly.\"), \"\\n\", React.createElement(_components.p, null, \"You can also modify the code to use \", React.createElement(_components.em, null, \"HashMap\"), \" or \", React.createElement(_components.em, null, \"Vector\"), \" or \", React.createElement(_components.em, null, \"BTreeSet\"), \" or \", React.createElement(_components.em, null, \"HashSet\"), \", according to your requirement.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Prime Factorization of a natural number is splitting the number into the product of prime numbers. It is used for various applications.\"), \"\\n\", React.createElement(_components.p, null, \"In this article, we made a function to generate all the prime factors of a number and store them with their respective exponents. Here is the function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"pub fn prime_factorization(mut number:i128) -> BTreeMap<i128, i128> {\\n    let mut prime_factors: BTreeMap<i128, i128> = BTreeMap::new();\\n    let mut freq:i128 = 0;\\n    while number&1 == 0 {\\n        number>>=1;\\n        freq+=1;\\n    }\\n    if freq > 0 { prime_factors.insert(2, freq);}\\n    let mut i = 3;\\n    while i*i <= number {\\n        if number%i==0 {\\n            freq = 0;\\n            while number%i==0 {\\n                number/=i;\\n                freq+=1;\\n            }\\n            prime_factors.insert(i, freq);\\n        }\\n        i+=2;\\n    }\\n    if number > 1 {prime_factors.insert(number, 1);}\\n\\n    return prime_factors;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Above program runs on O( sqrt (n) ) time complexity. We can also optimize the code using sieve method, which we will discuss later.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Thank You\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"Prime Factorization of a natural number - Rust Programming\",\n    description: \"Prime Factorization of a natural number is splitting the number into its factors, which are prime numbers. Here, we will make a function to list all the prime factors of a natural number in Rust using BTreeMap\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/2 Number Theory/2.2 Factors Of Number/prime-factorization-of-a-number.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","strong","ol","li","pre","code","blockquote","em","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","textAlign","src","primeFactorization","width","alt","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}