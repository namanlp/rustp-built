"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1148],{82960:function(e,n,r){r.r(n),r.d(n,{default:function(){return c}});var t=r(27378),a=r(20951),l=r.p+"static/prime-numbers-970dba61bd05474a22afcad9486d6e28.webp",i=r(88957);function m(e){var n=Object.assign({h1:"h1",a:"a",div:"div",p:"p",h2:"h2",strong:"strong",ul:"ul",li:"li",h3:"h3",pre:"pre",code:"code",blockquote:"blockquote"},(0,a.ah)(),e.components);return t.createElement(t.Fragment,null,t.createElement(n.h1,{id:"prime-numbers",style:{position:"relative"}},t.createElement(n.a,{href:"#prime-numbers","aria-label":"prime numbers permalink",className:"anchor before"},t.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Prime Numbers"),"\n",t.createElement(n.p,null,"and program to check if a number is Prime number or not in Rust."),"\n",t.createElement(n.h2,{id:"what-are-the-prime-numbers-",style:{position:"relative"}},t.createElement(n.a,{href:"#what-are-the-prime-numbers-","aria-label":"what are the prime numbers  permalink",className:"anchor before"},t.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"What are the Prime Numbers ?"),"\n",t.createElement(n.p,null,"Prime Numbers are the natural number greater than 1, that are divisible only by 1 and the number itself."),"\n",t.createElement(n.p,null,"Alternatively, you can say that prime numbers are the natural numbers greater than 1 that have only 2 factors, that is 1 and the number itself."),"\n",t.createElement(n.p,null,"Smallest Prime number is 2."),"\n",t.createElement(n.p,null,t.createElement(n.strong,null,"For Example")," : 19 is a prime number. It is only divisible by 1 and 19 itself."),"\n","\n",t.createElement("div",{style:{textAlign:"center"}},t.createElement("img",{src:l,width:"100%",alt:"Prime Numbers less than 20"})),"\n",t.createElement(n.h2,{id:"properties-of-prime-numbers",style:{position:"relative"}},t.createElement(n.a,{href:"#properties-of-prime-numbers","aria-label":"properties of prime numbers permalink",className:"anchor before"},t.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Properties of Prime Numbers"),"\n",t.createElement(n.ul,null,"\n",t.createElement(n.li,null,"All prime numbers except 2 are odd numbers. 2 is also the smallest prime number."),"\n",t.createElement(n.li,null,"2 prime numbers are always co prime to each other, that is their GCD = 1."),"\n",t.createElement(n.li,null,"Every natural number greater than 1 can be expressed as product of powers of prime numbers, which is unique. See ",t.createElement(n.a,{href:"/number-theory/prime-factorization-of-a-number/"},"Prime Factorization of a number")),"\n",t.createElement(n.li,null,"Every even natural number greater than 2 can be expressed as the sum of two prime numbers."),"\n",t.createElement(n.li,null,t.createElement(n.a,{href:"https://en.wikipedia.org/wiki/Fermat's_little_theorem"},"Fermat's little theorem"),", for any number n, and a prime number p,  ",t.createElement("b",null," ( n",t.createElement("sup",null," p-1")," )  mod p = 1 ")),"\n",t.createElement(n.li,null,"Every prime number greater than 3 can be written as 6n+1 or 6n-1, where n is any natural number."),"\n"),"\n",t.createElement(n.h2,{id:"check-if-a-number-is-prime",style:{position:"relative"}},t.createElement(n.a,{href:"#check-if-a-number-is-prime","aria-label":"check if a number is prime permalink",className:"anchor before"},t.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Check if a number is Prime"),"\n",t.createElement(n.p,null,"Let us now make a function to check if a given number is prime or not. We iterate through all the number from 2 to square root of number and check if it divides the number. If yes, return false."),"\n",t.createElement(n.p,null,"Finally, return true because it not divisible by any number."),"\n",t.createElement(n.p,null,t.createElement(n.strong,null,"Proof")),"\n",t.createElement(n.p,null,"Let us suppose, that some number, N is not prime. So, we can write it as"),"\n",t.createElement(n.p,null,"N = A × B"),"\n",t.createElement(n.p,null,"and 1 < A ≤ B < N. So, A must be less than or equal to square root of N, else A × B will become greater than N, because A × A > N and A ≤ B => A × B > N."),"\n",t.createElement(n.p,null,"Hence, we have to check for the numbers only upto sqrt( N )."),"\n",t.createElement(n.h3,{id:"program",style:{position:"relative"}},t.createElement(n.a,{href:"#program","aria-label":"program permalink",className:"anchor before"},t.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Program"),"\n",t.createElement(n.pre,null,t.createElement(n.code,{className:"language-rust"},"\nfn check_prime(n:usize) -> bool{\n\n    // Iterate from i = 2 to sqrt ( n )\n    let mut i:usize = 2;\n    while i*i<=n {\n        // Return false if the number is divisible\n        if n%i == 0 {\n            return false;\n        }\n        i+=1;\n    }\n\n    // Return true finally\n    return true;\n}\n")),"\n",t.createElement(n.p,null,"with Driver code"),"\n",t.createElement(n.pre,null,t.createElement(n.code,{className:"language-rust"},'use std::io::stdin;\n\nfn take_int() -> usize {\n    let mut input = String::new();\n    stdin().read_line(&mut input).unwrap();\n    return input.trim().parse().unwrap();\n}\n\nfn check_prime(n:usize) -> bool{\n\n    // Iterate from i = 2 to sqrt ( n )\n    let mut i = 2;\n    while i*i<=n {\n        // Return false if the number is divisible\n        if n%i == 0 {\n            return false;\n        }\n        i+=1;\n    }\n\n    // Return true finally\n    return true;\n}\n\npub fn main() {\n    // Take the number from user\n    let n = take_int();\n\n    // Output on the basis of if the number is prime or not\n\n    if check_prime(n) {\n        println!("Yes, given number is a prime number");\n    }\n    else {\n        println!("No, given number is not a prime number");\n    }\n}\n')),"\n",t.createElement(n.p,null,t.createElement(n.strong,null,"Input")),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"1000000007"),"\n"),"\n",t.createElement(n.p,null,t.createElement(n.strong,null,"Output")),"\n",t.createElement(n.blockquote,null,"\n",t.createElement(n.p,null,"Yes, given number is a prime number"),"\n"),"\n",t.createElement(n.p,null,t.createElement(n.strong,null,"Time Complexity : O( sqrt( N ) )")," ",t.createElement("br"),"\n",t.createElement(n.strong,null,"Space Complexity : O( 1 )")),"\n",t.createElement(n.h2,{id:"conclusion",style:{position:"relative"}},t.createElement(n.a,{href:"#conclusion","aria-label":"conclusion permalink",className:"anchor before"},t.createElement(n.div,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Conclusion"),"\n",t.createElement(n.p,null,"Prime numbers is a very important concept, especially from Competitive programming point of view. They have plenty of interesting properties and interesting patterns."),"\n",t.createElement(n.p,null,"In this article, we discussed some of the properties of prime numbers, as well as made a program to check whether a given number is prime or not in square root time complexity."),"\n",t.createElement(n.p,null,"Here is the optimized function for easy access"),"\n",t.createElement(n.pre,null,t.createElement(n.code,{className:"language-rust"},"fn check_prime(n:usize) -> bool{\n    let mut i = 2;\n    while i*i<=n {\n        if n%i == 0 { return false; }\n        i+=1;\n    }\n    return true;\n}\n")),"\n",t.createElement(n.p,null,t.createElement(n.strong,null,"Thank You")),"\n","\n",t.createElement(i.H,{title:"Prime Numbers and function to check if a number is prime - Rust Programming",description:"Prime numbers are the numbers which are divisible only by 1 and the number itself. We will discuss some of the properties of Prime numbers and make a program to check if a given number is prime number or not in Rust."}))}var s=function(e){void 0===e&&(e={});var n=Object.assign({},(0,a.ah)(),e.components).wrapper;return n?t.createElement(n,e,t.createElement(m,e)):m(e)};function u(e){return e.children}function c(e){return t.createElement(u,e,t.createElement(s,e))}}}]);
//# sourceMappingURL=component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-2-number-theory-2-2-factors-of-number-prime-numbers-mdx-a760d808be5e885a0e60.js.map