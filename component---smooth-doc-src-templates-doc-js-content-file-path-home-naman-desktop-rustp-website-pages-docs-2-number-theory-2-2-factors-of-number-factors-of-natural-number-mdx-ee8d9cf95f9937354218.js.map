{"version":3,"file":"component---smooth-doc-src-templates-doc-js-content-file-path-home-naman-desktop-rustp-website-pages-docs-2-number-theory-2-2-factors-of-number-factors-of-natural-number-mdx-ee8d9cf95f9937354218.js","mappings":"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","sources":["webpack://website/./images/Number Theory/factors-of-number.webp","webpack://website/./pages/docs/2 Number Theory/2.2 Factors Of Number/factors-of-natural-number.mdx","webpack://website/../smooth-doc/src/templates/doc.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/factors-of-number-192e80ccc1a249afb1886c688099fb3b.webp\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport factorsOf100 from \"../../../../images/Number Theory/factors-of-number.webp\";\nimport {SEO} from \"smooth-doc/src/components/SEO\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    div: \"div\",\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, {\n    id: \"factors-of-a-natural-number\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#factors-of-a-natural-number\",\n    \"aria-label\": \"factors of a natural number permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Factors of a Natural Number\"), \"\\n\", React.createElement(_components.p, null, \"And a program in Rust to list all the factors of a natural number\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"what-are-factors-of-a-number\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#what-are-factors-of-a-number\",\n    \"aria-label\": \"what are factors of a number permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"What are Factors of a number\"), \"\\n\", React.createElement(_components.p, null, \"Factors or divisors of a natural number, say n, is a natural number, say m, that \", React.createElement(_components.strong, null, \"perfectly divides\"), \" the number n. That is, \", React.createElement(_components.strong, null, \"n % m = 0\"), \". It can also be written that \", React.createElement(_components.strong, null, \"n = km\"), \", where k is also a natural number.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"For Example :\"), \" 1, 2, and 4 are factors of 4, but 3 is not a factor of 4\"), \"\\n\", \"\\n\", React.createElement(\"div\", {\n    style: {\n      textAlign: 'center'\n    }\n  }, React.createElement(\"img\", {\n    src: factorsOf100,\n    width: \"100%\",\n    alt: \"Factors of 100\"\n  })), \"\\n\", React.createElement(_components.h2, {\n    id: \"naive-approach\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#naive-approach\",\n    \"aria-label\": \"naive approach permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Naive Approach\"), \"\\n\", React.createElement(_components.p, null, \"Naive or brute force approach is to traverse all the numbers from 1 to n, and add the number to vector if it divides the given number. Function for this approach in Rust is :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn list_factors(number:i128) -> Vec<i128>{\\n    // Initialize factors Vector\\n    let mut factors : Vec<i128> = Vec::new();\\n\\n    // Check all the numbers from 1 to n, both inclusive\\n    for i in 1..(number+1) {\\n        if number % i == 0 {\\n            // Push the number to factors, if it divides number\\n            factors.push(i);\\n        }\\n    }\\n\\n    // Return the factors Vector as answer\\n    return factors;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Program with driver code\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"use std::io;\\n\\nfn list_factors(number:i128) -> Vec<i128>{\\n    // Initialize factors Vector\\n    let mut factors : Vec<i128> = Vec::new();\\n\\n    // Check all the numbers from 1 to n, both inclusive\\n    for i in 1..(number+1) {\\n        if number % i == 0 {\\n            // Push the number to factors, if it divides number\\n            factors.push(i);\\n        }\\n    }\\n\\n    // Return the factors Vector as answer\\n    return factors;\\n}\\n\\n// Driver Code\\n\\nfn main() {\\n    // Read and parse number to i128\\n    let mut input = String::new();\\n    io::stdin().read_line(&mut input).unwrap();\\n    let number : i128 = input.trim().parse().unwrap();\\n\\n    println!(\\\"{:?}\\\", list_factors(number));\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"100\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"[1, 2, 4, 5, 10, 20, 25, 50, 100]\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O(n)\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( sqrt(n) )\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note :\"), \" We can print the number instead of storing into the array or vector, to reduce \", React.createElement(_components.strong, null, \"Space Complexity to O(1)\"), \" but it is rarely useful. Vector of factors is far more useful in real applications, so I will demonstrate Vector, instead of printing directly.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"efficient-approach\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#efficient-approach\",\n    \"aria-label\": \"efficient approach permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Efficient Approach\"), \"\\n\", React.createElement(_components.p, null, \"If you look the condition for factor carefully, that is\"), \"\\n\", React.createElement(\"center\", null, \" \", React.createElement(\"b\", null, \" n = k.m \"), \" \"), \"\\n\", React.createElement(_components.p, null, \"So, both k and m are factors of n, and not only m. So, \", React.createElement(_components.strong, null, \"all the factors of number are in pair\")), \"\\n\", React.createElement(_components.p, null, \"For example, factors of 100 are ( 1, 100 ), ( 2, 50 ), ( 4, 25 ), ( 5, 20 ) and ( 10, 10 ). Clearly,\", React.createElement(_components.strong, null, \"If m is a factor of n, n/m is also a factor of n\")), \"\\n\", React.createElement(_components.p, null, \"Using this property, we only have to check for numbers till square root of n, because it can't be possible to get n, as a product of 2 numbers greater than square root of n.\"), \"\\n\", React.createElement(_components.p, null, \"Function for this approach :\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn list_factors(number:i128) -> Vec<i128>{\\n    // Initialize factors Vector\\n    let mut factors : Vec<i128> = Vec::new();\\n\\n    let mut i : i128 = 1;\\n\\n    // Check till i is less than or equal to square root n\\n    while i*i <= number{\\n        if number % i == 0 {\\n            factors.push(i);\\n\\n            // to prevent duplication, if number is perfect square\\n            if i*i != number {\\n                factors.push(number / i);\\n            }\\n        }\\n        i+=1;\\n    }\\n\\n    // It is generally useful to sort the vector\\n    // And it will not affect our time complexity,\\n    // Because logarithmic time is much less than square root time complexity\\n\\n    factors.sort();\\n\\n    // Return the factors Vector as answer\\n    return factors;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Use the same driver code.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Input\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"100\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Output\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"[1, 2, 4, 5, 10, 20, 25, 50, 100]\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Time Complexity : O( sqrt(n) )\"), \" \", React.createElement(\"br\"), \"\\n\", React.createElement(_components.strong, null, \"Space Complexity : O( sqrt(n) )\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Note :\"), \" Repeating, We can print the number instead of storing into the array or vector, to reduce \", React.createElement(_components.strong, null, \"Space Complexity to O(1)\"), \" but it is rarely useful. Vector of factors is far more useful in real applications, so I will demonstrate Vector, instead of printing directly.\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"conclusion\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#conclusion\",\n    \"aria-label\": \"conclusion permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.div, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Conclusion\"), \"\\n\", React.createElement(_components.p, null, \"Factors or divisors of a natural number are the numbers that perfectly divides it. In this article we made a program to list all the factors of a natural number in Rust, and also optimized it to square root time complexity. Here is the optimized function for easy access\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-rust\"\n  }, \"fn list_factors(number:i128) -> Vec<i128>{\\n    let mut factors : Vec<i128> = Vec::new();\\n    let mut i : i128 = 1;\\n    while i*i <= number{\\n        if number % i == 0 {\\n            factors.push(i);\\n            if i*i != number { factors.push(number / i); }\\n        }\\n        i+=1;\\n    }\\n    factors.sort();\\n    return factors;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Thank You\")), \"\\n\", \"\\n\", React.createElement(SEO, {\n    title: \"List Factors of a number\",\n    description: \"Factors or divisors of a natural number are the numbers that perfectly divides it. Here, we will make a function to list all the factors of a natural number in Rust, and also optimize it to square root time complexity.\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/naman/Desktop/rustp/website/pages/docs/2 Number Theory/2.2 Factors Of Number/factors-of-natural-number.mdx\";\nimport {graphql} from 'gatsby';\nexport const pageQuery = graphql`\n  query DocPageQuery($id: String!) {\n    mdx(id: { eq: $id }) {\n      fields {\n        pageType\n        title\n        editLink\n      }\n      tableOfContents\n    }\n  }\n`;\nfunction DocTemplate({children}) {\n  return children;\n}\nDocTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(DocTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","a","div","p","h2","strong","pre","code","blockquote","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","textAlign","src","factorsOf100","width","alt","SEO","title","description","MDXLayout","wrapper","DocTemplate","children","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}